[{"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\index.js":"1","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\GameBoard.jsx":"3","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Referee.js":"4","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Tile.js":"5","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\constants.js":"6","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Pieces.jsx":"7","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\error_page.jsx":"8","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\SignUp.jsx":"9","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\NavBar.jsx":"10","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Login.jsx":"11","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\App.jsx":"12","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\GamePage.jsx":"13","C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Room.jsx":"14","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\index.js":"15","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\reportWebVitals.js":"16","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\error_page.jsx":"17","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\App.jsx":"18","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\GamePage.jsx":"19","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Login.jsx":"20","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\SignUp.jsx":"21","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Room.jsx":"22","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\NavBar.jsx":"23","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\GameBoard.jsx":"24","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\constants.js":"25","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Tile.js":"26","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Referee.js":"27","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Pieces.jsx":"28"},{"size":1265,"mtime":1674892214938,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1673921769966,"results":"31","hashOfConfig":"30"},{"size":15623,"mtime":1675501660410,"results":"32","hashOfConfig":"30"},{"size":15427,"mtime":1675496166404,"results":"33","hashOfConfig":"30"},{"size":399,"mtime":1675330184805,"results":"34","hashOfConfig":"30"},{"size":418,"mtime":1675498993212,"results":"35","hashOfConfig":"30"},{"size":209,"mtime":1674282862833,"results":"36","hashOfConfig":"30"},{"size":363,"mtime":1673366426195,"results":"37","hashOfConfig":"30"},{"size":2048,"mtime":1674821496843,"results":"38","hashOfConfig":"30"},{"size":898,"mtime":1674821046614,"results":"39","hashOfConfig":"30"},{"size":1262,"mtime":1674821500937,"results":"40","hashOfConfig":"30"},{"size":289,"mtime":1674966240994,"results":"41","hashOfConfig":"30"},{"size":4336,"mtime":1675174024501,"results":"42","hashOfConfig":"30"},{"size":314,"mtime":1674962787630,"results":"43","hashOfConfig":"30"},{"size":1265,"mtime":1675711305111,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":1673921769966,"results":"46","hashOfConfig":"45"},{"size":363,"mtime":1673366426195,"results":"47","hashOfConfig":"45"},{"size":289,"mtime":1674966240994,"results":"48","hashOfConfig":"45"},{"size":4345,"mtime":1675764058255,"results":"49","hashOfConfig":"45"},{"size":1262,"mtime":1674821500937,"results":"50","hashOfConfig":"45"},{"size":2048,"mtime":1674821496843,"results":"51","hashOfConfig":"45"},{"size":338,"mtime":1675784010155,"results":"52","hashOfConfig":"45"},{"size":929,"mtime":1675711542260,"results":"53","hashOfConfig":"45"},{"size":28770,"mtime":1675784535060,"results":"54","hashOfConfig":"45"},{"size":418,"mtime":1675498993212,"results":"55","hashOfConfig":"45"},{"size":399,"mtime":1675330184805,"results":"56","hashOfConfig":"45"},{"size":15428,"mtime":1675772515299,"results":"57","hashOfConfig":"45"},{"size":209,"mtime":1674282862833,"results":"58","hashOfConfig":"45"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kcp9bs",{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1sy5oad",{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"106"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\index.js",[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\GameBoard.jsx",["151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167"],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Referee.js",[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Tile.js",[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\constants.js",[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Pieces.jsx",[],[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\error_page.jsx",[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\SignUp.jsx",[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\NavBar.jsx",["168"],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Login.jsx",["169","170"],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\App.jsx",[],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\GamePage.jsx",["171","172"],[],"C:\\Users\\think\\Desktop\\Projects\\Chess Project\\frontend\\chess-frontend\\src\\Components\\Room.jsx",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\index.js",[],[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\error_page.jsx",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\App.jsx",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\GamePage.jsx",["173","174"],[],"import React, { useState, useEffect } from 'react'\r\nimport { Navigate } from 'react-router-dom';\r\nimport GameBoard from './GameBoard';\r\nimport './GamePage.css'\r\n\r\nexport default function GamePage() {\r\n    const CREATE_GAME_API_URL = `http://143.110.180.4:8080/api/create_game`;\r\n    const ROOM_API_URL = `http://143.110.180.4:8080/api/is_room_present`;\r\n    const [roomId, setRoomId] = useState('');\r\n    const [color,setColor] = useState(null);\r\n    const [gamecontent, setGameContent] = useState(null);\r\n    const [startGameRoomId, setStartGameRoomId] = useState(null);\r\n    const [navigateToRoom, setNavigateToRoom] = useState(null);\r\n    const [invalidRoomID, setinvalidRoomID] = useState(null);\r\n    const [errorMsg,setErrorMsg] = useState(null);\r\n    function startGameHandler() {\r\n        fetch(CREATE_GAME_API_URL, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n            body: \"white\"\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setStartGameRoomId(data[\"room_id\"]);\r\n                setGameContent(1);\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const color = 'W';\r\n        setColor(color);\r\n        fetch(ROOM_API_URL, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n            body: roomId\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data[\"is_room_present\"] === \"true\") {\r\n                    //here we go into nested fetch if the room is present\r\n                    fetch(`http://143.110.180.4:8080/api/num_clients`, {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-type\": \"application/json\",\r\n                        },\r\n                        body: roomId\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(data => {\r\n                            if ((data[\"num_clients\"] < 2)) {\r\n                                setinvalidRoomID(true);\r\n                                setNavigateToRoom(true);\r\n                                setErrorMsg(null);\r\n                            }\r\n                            else {\r\n                                \r\n                                setErrorMsg(\"Two Players are Aready Connected !! You cannot join this room !!!\");\r\n                            }\r\n                        })\r\n                        .catch(error => console.error('Error:', error));\r\n                    \r\n                }\r\n                else {\r\n                    setinvalidRoomID(false);\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n    };\r\n\r\n    if (navigateToRoom && navigateToRoom === true) {\r\n        return <Navigate to={\"/room\"} state={{ roomId, color }} />;\r\n    }\r\n    return (\r\n        <div>\r\n            {!gamecontent && <button onClick={startGameHandler}> <b>Start New Game</b> </button>}\r\n            {\r\n                gamecontent &&\r\n                <div>\r\n                    <div className='roomMsg'>\r\n                        Use below room ID to join your game !!! Also send this room ID to your opponent to join.\r\n                    </div>\r\n                    <br />\r\n                    <div className='roomIdDisplay'>{startGameRoomId}</div>\r\n                </div>\r\n            }\r\n            <form action=\"submit\" onSubmit={handleSubmit} >\r\n                <label htmlFor=\"roomId\"> <b> <h1>Enter Room ID</h1> </b> </label>\r\n                <input value={roomId} onChange={(e) => { setRoomId(e.target.value) }} type=\"text\" placeholder='' id='roomId' name='roomId' />\r\n                <button type=\"submit\" method=\"post\"><b>Go To Room</b></button>\r\n            </form>\r\n            <>\r\n                {\r\n                    (invalidRoomID === false) ? <div>Invalid Room ID !!!! Please retry with another room ID</div> : <div></div>\r\n                }\r\n            </>\r\n            <div>\r\n                {\r\n                    errorMsg\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Login.jsx",["175","176"],[],"import React, { useState } from 'react'\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport './Login.css'\r\n\r\nexport default function Login() {\r\n    const { playerName, setPlayerName } = useState('');\r\n    const { password, setPassword } = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const [goToSignUp, setgoToSignUp] = useState(false);\r\n\r\n    if (goToSignUp === true) {\r\n        return <Navigate to=\"/signup\" />;\r\n    }\r\n    return (\r\n        <>\r\n            <div className='auth-form-container'>\r\n                <form className='login_form' onSubmit={handleSubmit} >\r\n                    <label htmlFor=\"playerName\"> <b>Player Name</b> </label>\r\n                    <input value={playerName} type=\"text\" placeholder='' id='playerName' name='playerName' />\r\n                    <label htmlFor=\"password\"><b>Password</b></label>\r\n                    <input value={password} type=\"password\" placeholder='' id='password' name='password' />\r\n                    <button type=\"submit\" ><b>Log In</b></button>\r\n                </form>\r\n                <button className='link-btn' onClick={() => { setgoToSignUp(true); }} >Don't have an account? Register Here.</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\SignUp.jsx",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Room.jsx",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\NavBar.jsx",["177"],[],"import './NavBar.css'\r\nimport { useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction NavBar() {\r\n\r\nconst navBarLinks = useRef(null);\r\n\r\nfunction toggleNavBar()\r\n{\r\n  navBarLinks.current.classList.toggle('active');\r\n}\r\n \r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"brand-title\">\r\n      <Link to={\"/\"}>CHESS</Link>\r\n      </div>\r\n      <a href=\"#\" className=\"toggle-button\"  onClick={()=>toggleNavBar()}>\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n      </a>\r\n      <div className=\"navbar-links\" ref={navBarLinks}>\r\n        <ul>\r\n          {/* <li><Link to={\"signup\"}>Sign Up</Link></li> */}\r\n          {/* <li><Link to={\"login\"}>Log In</Link></li> */}\r\n          <li className='playbutton' ><Link to={\"playasguest\"}>PLAY</Link></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\GameBoard.jsx",["178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],[],"import React, { useRef, useState, useEffect } from 'react'\r\nimport './GameBoard.css'\r\nimport Tile from './Tile';\r\nimport Referee from './Referee';\r\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\r\nimport io from 'socket.io-client';\r\n\r\nexport let piece = {\r\n  image: String,\r\n  x: Number,\r\n  y: Number,\r\n  type: String,\r\n  team: String,\r\n  enPassant: Boolean\r\n}\r\n\r\n// array which holds the information regarding initial chess pieces and their \r\nconst initialBoardStateWhite = [];\r\n\r\nconst initialBoardStateBlack = [];\r\n\r\n\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const color =  ((p === 0) ? \"B\" : \"W\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateWhite.push({ image: `assets/images/${color}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_king.png`, x: main_piece_x_cor, y: 4, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateWhite.push({ image: `assets/images/${color}_queen.png`, x: main_piece_x_cor, y: 3, type: \"queen\", team: teamType });\r\n}\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const color =  ((p === 0) ? \"W\" : \"B\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateBlack.push({ image: `assets/images/${color}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_king.png`, x: main_piece_x_cor, y: 3, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateBlack.push({ image: `assets/images/${color}_queen.png`, x: main_piece_x_cor, y: 4, type: \"queen\", team: teamType });\r\n}\r\n\r\n//the url where the web socket server is listening for connections\r\nconst SOCKET_URL = `ws://143.110.180.4:8085/`;\r\n\r\n// global socket object to use for communication with the server\r\nconst socket = io(SOCKET_URL);\r\n\r\n\r\nexport default function GameBoard({room, isBlack }) {\r\n  // this is a state variable that is used to determine the state of the game ,\r\n  // we need to fetch this from the backend on component mount, but the fetching should be performed after 1 second  \r\n  const [gameState, setGameState] = useState(\"not_started\");\r\n\r\n  // state variable to hold the number of clients joined at any given point of time\r\n  const [numClients, setNumClients] = useState(0);\r\n\r\n  const [gameOverDis,setGameOverDis] = useState(null);\r\n\r\n  const [enPassantAttackers, setEnPassantAttackers] = useState(null);\r\n\r\n  const [gameResult,setGameResult] = useState(null);\r\n\r\n  // state variable to determine if the state is white or black\r\n  const [isBlackState, setIsBlackState] = useState(false);\r\n\r\n\r\n  const [activePiece, setActivePiece] = useState(null);\r\n  // const [gridX, setGridX] = useState(0);\r\n  // const [gridY, setGridY] = useState(0);\r\n  // const [pieces, setPieces] = useState(isBlack ? initialBoardStateBlack : initialBoardStateWhite);\r\n  const [pieces, setPieces] = useState(initialBoardStateWhite);\r\n  const chessBoardRef = useRef(null);\r\n  const pawnPromotionModalRef = useRef(null);\r\n  const referee = new Referee();\r\n  const [promotionPawn, setPromotionPawn] = useState(null);\r\n  const gameStartButtonRef = useRef(null);\r\n  const [turn, setTurn] = useState(null);\r\n  const [dots, setDots] = useState([]);\r\n  const [enPassantAttackCoordinates,setenPassantAttackCoordinates] = useState(null);\r\n  const [castleRooks,setCastleRooks] = useState(null);\r\n\r\n\r\n  // JOIN THE ROOM ON COMPONENT MOUNT + LEAVE THE ROOM ON Component Unmount\r\n  useEffect(() => {\r\n    let color = \"white\";\r\n    if (sessionStorage.getItem(room) != null) {\r\n      color = sessionStorage.getItem(room);\r\n      color === \"white\" ? setIsBlackState(false) : setIsBlackState(true);\r\n    }\r\n    socket.emit('joinRoomEvent', JSON.stringify({ 'room': `${room}`, 'color': `${color}` }));\r\n    return () => {\r\n      socket.emit('leaveRoomEvent', room);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      fetch(`http://143.110.180.4:8080/api/num_clients`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: room\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          setNumClients(data[\"num_clients\"]);\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }, 1000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (gameStartButtonRef) {\r\n      if (numClients != 2 || gameState != 'not_started') {\r\n        if (!gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.add('two_clients');\r\n      }\r\n      else {\r\n        if (gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.remove('two_clients');\r\n      }\r\n    }\r\n  }, [numClients, gameState]);\r\n\r\n  useEffect(() => {\r\n    if (gameState == \"completed\") {\r\n      setGameOverDis(\"GAME IS OVER !!! PLEASE START NEW GAME !! \")\r\n    }\r\n  }, [gameState]);\r\n\r\n  socket.on(\"pieceInfo\", (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    setPieces(jsondata[\"pieces\"]);\r\n    setGameState(jsondata[\"game_state\"]);\r\n    if(jsondata[\"turn\"] != \"NA\")\r\n    setTurn(jsondata[\"turn\"])\r\n  });\r\n\r\n  socket.on(\"newMoveUpdateServerToClient\", (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    setPieces(jsondata[\"pieces\"]);\r\n    if(turn === \"white\")\r\n    setTurn(\"black\");\r\n    else\r\n    setTurn(\"white\")\r\n  });\r\n\r\n  socket.on(\"gameEndEvent\", (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    const res = jsondata[\"result\"];\r\n    const resDis = (res === \"white\") ? \"WHITE WON\" : ((res === \"black\") ? \"BLACK WON\" : \"STALEMATE\");\r\n    setGameResult(resDis);\r\n    setGameState(\"completed\");\r\n    //result will be (\"black\" / \"white\" / \"\")  --- FE TBD\r\n  });\r\n\r\n  socket.on(\"colorMsg\", (data) => {\r\n    (data === \"white\") ? setIsBlackState(false) : setIsBlackState(true);\r\n    (data === \"white\") ? setPieces(initialBoardStateWhite) : setPieces(initialBoardStateBlack);\r\n    setGameState(\"started\");\r\n    setTurn(\"white\");\r\n    sessionStorage.setItem(room, data);\r\n  });\r\n\r\n  function startGameHandler() {\r\n    socket.emit('startGameEvent', room);\r\n  }\r\n\r\n  socket.on('enPassant', (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    const x = jsondata[\"x\"];\r\n    const y = jsondata[\"y\"];\r\n    const attackers = pieces.filter(p=> (p.x === y) && (p.type === \"pawn\") && (p.team === \"our\") && Math.abs(p.y-x) === 1);\r\n    setEnPassantAttackers(attackers);\r\n    setEnPassant(true);\r\n    setenPassantAttackCoordinates({x:x,y:y});\r\n  })\r\n\r\n  const [pawnPromoteCoordinates,setPawnPromoteCoordinates] = useState(null);\r\n  const [enPassant,setEnPassant] = useState(null);\r\n\r\n  function handlePawnPromotion(activePiece,x,y,captureFlag)\r\n  {\r\n    setPromotionPawn(activePiece);\r\n    setPawnPromoteCoordinates({x:y,y:x});\r\n    pawnPromotionModalRef.current.classList.remove('hidden');\r\n  }\r\n\r\n  function normalMove(x, y) {\r\n    const a = dots.find((d) => d.i === x && d.j === y);\r\n    if (a) {\r\n      if(activePiece && activePiece.type === \"pawn\" && (y=== 0))\r\n      {\r\n        handlePawnPromotion(activePiece,x,y,false);\r\n      }\r\n      else\r\n      {\r\n        if(activePiece.type === \"pawn\" && Math.abs(activePiece.x-y) === 2)\r\n        {\r\n          socket.emit(\"eligibleForEnPassant\",JSON.stringify({room:room,x:x,y:y}));\r\n        }\r\n        const updatedPieces = [];\r\n        pieces.forEach((p) => {\r\n          if (p === activePiece) {\r\n            if(p.type === \"king\")\r\n            {\r\n              socket.emit('kingMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n            }\r\n            else if(p.type === \"rook\" && p.x === 7 && p.y === 7)\r\n            {\r\n              socket.emit('kingRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n            }\r\n            else if(p.type === \"rook\" && p.x === 7 && p.y === 0)\r\n            {\r\n              socket.emit('queenRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n            }\r\n            p.x = y;\r\n            p.y = x;\r\n            updatedPieces.push(p);\r\n          }\r\n          else {\r\n            updatedPieces.push(p);\r\n          }\r\n        });\r\n        setPieces(updatedPieces);\r\n        setDots([]);\r\n        socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n            socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n          }\r\n        }\r\n        else {\r\n          if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n            socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n          }\r\n        }\r\n        if(turn === \"white\")\r\n        setTurn(\"black\");\r\n        else\r\n        setTurn(\"white\")\r\n        setActivePiece(null);\r\n        setEnPassant(null);\r\n        setEnPassantAttackers(null);\r\n        setenPassantAttackCoordinates(null);\r\n        setCastleRooks(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  function captureMove(a) {\r\n    if(activePiece && activePiece.type === \"pawn\" && (a.j=== 0))\r\n    {\r\n      handlePawnPromotion(activePiece,a.i,a.j,true);\r\n    }\r\n    else\r\n    {\r\n      const updatedPieces = [];\r\n      pieces.forEach((p) => {\r\n        if (p === activePiece) {\r\n          if(p.type === \"king\")\r\n          {\r\n            socket.emit('kingMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n          }\r\n          else if(p.type === \"rook\" && p.x === 7 && p.y === 7)\r\n          {\r\n            socket.emit('kingRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n          }\r\n          else if(p.type === \"rook\" && p.x === 7 && p.y === 0)\r\n          {\r\n            socket.emit('queenRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n          }\r\n          if(enPassantAttackers)\r\n          {\r\n            enPassantAttackers.forEach((attacker)=>{\r\n              if(attacker.x === p.x && attacker.y === p.y && enPassantAttackCoordinates.y === a.j && enPassantAttackCoordinates.x === a.i)\r\n              {\r\n                p.x = enPassantAttackCoordinates.y -1;\r\n                p.y = enPassantAttackCoordinates.x;\r\n              }\r\n            })\r\n          }\r\n          else\r\n          {\r\n            p.x = a.j;\r\n            p.y = a.i;\r\n          }\r\n          updatedPieces.push(p);\r\n        }\r\n        else {\r\n          if (!(p.x === a.j && p.y === a.i)) {\r\n            updatedPieces.push(p);\r\n          }\r\n        }\r\n      });\r\n      setPieces(updatedPieces);\r\n      setDots([]);\r\n      socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      else {\r\n        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      if(turn === \"white\")\r\n      setTurn(\"black\");\r\n      else\r\n      setTurn(\"white\")\r\n      setActivePiece(null);\r\n      setEnPassant(null);\r\n      setEnPassantAttackers(null);\r\n      setenPassantAttackCoordinates(null);\r\n      setCastleRooks(null);\r\n    }\r\n  }\r\n\r\n\r\n  function validMovesDisplay(x, y) {\r\n    const currentPiece = pieces.find(p => p.y === x && p.x === y);\r\n    const dotsArr = [];\r\n    for (let i = 0; i <= 7; ++i) {\r\n      for (let j = 0; j <= 7; j++) {\r\n        const a = referee.isValidMove(y, x, j, i, currentPiece.type, currentPiece.team, pieces, true);\r\n        if (a) {\r\n          const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, i, j, pieces);\r\n          if (!referee.inCheck(newBoardState, currentPiece.team)) {\r\n            dotsArr.push({ i: i, j: j });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (enPassantAttackers) {\r\n      enPassantAttackers.forEach((p) => {\r\n        if (p.x === currentPiece.x && p.y === currentPiece.y) {\r\n          const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y,  enPassantAttackCoordinates.y, enPassantAttackCoordinates.x, pieces);\r\n          if (!referee.inCheck(newBoardState, currentPiece.team)) {\r\n            dotsArr.push({ i: enPassantAttackCoordinates.x, j: enPassantAttackCoordinates.y });\r\n          }\r\n        }\r\n      })\r\n    }\r\n    if(!referee.inCheck(pieces,\"our\"))\r\n    {\r\n      if(currentPiece.type === \"king\")\r\n      {\r\n        const req = JSON.stringify({room:room,color:(isBlackState == true?\"black\":\"white\")});\r\n        fetch(`http://143.110.180.4:8080/api/castling`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n          body: req\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            if(isBlackState == false)\r\n            {\r\n              console.log(data)\r\n              console.log('got here')\r\n                //white\r\n                //king side \r\n                const kingSideSquares = [{x:5,y:7},{x:6,y:7}];\r\n                const queenSideSquares = [{x:1,y:7},{x:2,y:7},{x:3,y:7}];\r\n                let occupiedKingSide = false;\r\n                let  occupiedQueenSide = false;\r\n                kingSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedKingSide = true;\r\n                  }\r\n                })\r\n                console.log(occupiedKingSide)\r\n                queenSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedQueenSide = true;\r\n                  }\r\n                })\r\n                const rooks = []\r\n                if(!occupiedKingSide && !areSquaresAttacked(kingSideSquares) && data[\"king\"] === false && data[\"kingRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle king side for white');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 7))\r\n                }\r\n                if(!occupiedQueenSide && !areSquaresAttacked(queenSideSquares) && data[\"king\"] === false && data[\"queenRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle queen side for white');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 0))\r\n                }\r\n                setCastleRooks(rooks);\r\n            }\r\n            else\r\n            {\r\n     \r\n                const kingSideSquares = [{x:1,y:7},{x:2,y:7}];\r\n                const queenSideSquares = [{x:4,y:7},{x:5,y:7},{x:6,y:7}];\r\n                let occupiedKingSide = false;\r\n                let  occupiedQueenSide = false;\r\n                kingSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedKingSide = true;\r\n                  }\r\n                })\r\n                queenSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedQueenSide = true;\r\n                  }\r\n                })\r\n                const rooks = []\r\n                if(!occupiedKingSide && !areSquaresAttacked(kingSideSquares) && data[\"king\"] === false && data[\"queenRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle king side for black');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 0))\r\n\r\n\r\n                }\r\n                if(!occupiedQueenSide && !areSquaresAttacked(queenSideSquares) && data[\"king\"] === false && data[\"kingRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle queen side for black');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 7))\r\n                }\r\n                setCastleRooks(rooks);\r\n            }\r\n          })\r\n          .catch(error => console.error('Error:', error));\r\n      }\r\n      else\r\n      {\r\n        setCastleRooks(null);\r\n      }\r\n    }\r\n    setDots(dotsArr);\r\n    setActivePiece(currentPiece);\r\n  }\r\n\r\n  function areSquaresAttacked(squares)\r\n  {\r\n    let ret = false;\r\n    squares.forEach((square) => {\r\n      pieces.forEach((piece) => {\r\n        if (piece.team === \"opponent\") {\r\n          if (referee.isValidMove(piece.x, piece.y, square.y , square.x, piece.type, piece.team, pieces, false)) {\r\n            ret = true;\r\n          }\r\n        }\r\n      })\r\n    })\r\n    return ret;\r\n  }\r\n\r\n  function grabPiece(e) {\r\n    if (!(gameState == \"completed\")) {\r\n      const chessboard = chessBoardRef.current;\r\n      const element = (e.target);\r\n      let x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\r\n      let y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\r\n      if (chessboard) {\r\n        if (!element.classList.contains(\"chess-piece\")) {\r\n          normalMove(x, y)\r\n        }\r\n        else {\r\n          if (gameState === \"not_started\") {\r\n            console.log(\"Please let the game begin to make moves\"); // we need to develop UI for this \r\n          }\r\n          else {\r\n            if ((turn === \"black\" && isBlackState === true) || (turn === \"white\" && isBlackState === false)) {\r\n              const a = dots.find((d) => d.i === x && d.j === y);\r\n              if (a) {\r\n                captureMove(a)\r\n              }\r\n              else {\r\n                if(castleRooks == null)\r\n                validMovesDisplay(x, y);\r\n                else\r\n                {\r\n                  let castleFlag = false;\r\n                  console.log(`x=${x}`);\r\n                  console.log(`y=${y}`);\r\n                  castleRooks.forEach((castleRook)=>{\r\n                    console.log(castleRook)\r\n                    if(castleRook.x === y && castleRook.y === x)\r\n                    {\r\n                      castleFlag = true;\r\n                      const updatedPieces=[];\r\n                      if(isBlackState === false)\r\n                      {\r\n                        let kingS = false;\r\n                        pieces.forEach((p)=>{\r\n                          if(p.x === y && p.y === x)\r\n                          {\r\n                            if(p.y === 7)\r\n                            {\r\n                              p.y = 5;\r\n                              kingS = true;\r\n                            }\r\n                            else if(p.y === 0)\r\n                            {\r\n                              p.y = 3;\r\n                            }\r\n                            updatedPieces.push(p);\r\n                          }\r\n                          else\r\n                          {\r\n                            if (!(p.x === 7 && p.y === 4)) {\r\n                              updatedPieces.push(p);\r\n                            }\r\n                            else\r\n                            {\r\n                              (kingS === true) ? p.y = 6 : p.y = 2;\r\n                              updatedPieces.push(p);\r\n                            }\r\n                          }\r\n                        })\r\n                      }\r\n                      else\r\n                      {\r\n                        let kingS = false;\r\n                        pieces.forEach((p)=>{\r\n                          if(p.x === y && p.y === x)\r\n                          {\r\n                            console.log(p.y)\r\n                            if(p.y === 7)\r\n                            {\r\n                              p.y = 4;\r\n                              \r\n                            }\r\n                            else if(p.y === 0)\r\n                            {\r\n                              p.y = 2;\r\n                              kingS = true;\r\n                            }\r\n                            updatedPieces.push(p);\r\n                          }\r\n                          else\r\n                          {\r\n                            if (!(p.x === 7 && p.y === 3)) {\r\n                              updatedPieces.push(p);\r\n                            }\r\n                            else\r\n                            {\r\n                              (kingS === true) ? p.y = 1 : p.y = 5;\r\n                              updatedPieces.push(p);\r\n                            }\r\n                          }\r\n                        })\r\n                      }\r\n                      setPieces(updatedPieces);\r\n                      setDots([]);\r\n                      socket.emit('kingMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n                      socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n                      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n                        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n                          socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n                        }\r\n                      }\r\n                      else {\r\n                        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n                          socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n                        }\r\n                      }\r\n                      if(turn === \"white\")\r\n                      setTurn(\"black\");\r\n                      else\r\n                      setTurn(\"white\");\r\n                      setActivePiece(null);\r\n                      setEnPassant(null);\r\n                      setEnPassantAttackers(null);\r\n                      setenPassantAttackCoordinates(null);\r\n                      setCastleRooks(null);\r\n                    }\r\n                  });\r\n                  if(!castleFlag)\r\n                  {\r\n                    validMovesDisplay(x,y);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n   function  promotePawn(type) {\r\n    if (promotionPawn) {\r\n      const updatedPieces = [];\r\n      pieces.forEach((piece) => {\r\n        if (promotionPawn === piece) {\r\n          piece.type = type;\r\n          piece.image = (!isBlackState) ? ((piece.team === \"our\") ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png`) : ((piece.team === \"our\") ? `/assets/images/B_${type}.png` : `/assets/images/W_${type}.png`);\r\n          piece.x = pawnPromoteCoordinates.x;\r\n          piece.y = pawnPromoteCoordinates.y;\r\n          updatedPieces.push(piece);\r\n        }\r\n        else\r\n        {\r\n          if(!(piece.x === pawnPromoteCoordinates.x && piece.y === pawnPromoteCoordinates.y))\r\n          updatedPieces.push(piece);\r\n        }\r\n      });\r\n      setPieces(updatedPieces);\r\n      setDots([]);\r\n      socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      else {\r\n        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      if(turn === \"white\")\r\n      setTurn(\"black\");\r\n      else\r\n      setTurn(\"white\");\r\n      setActivePiece(null);\r\n      setPawnPromoteCoordinates(null);\r\n      setPromotionPawn(null);\r\n      setEnPassant(null);\r\n      setEnPassantAttackers(null);\r\n      setenPassantAttackCoordinates(null);\r\n      setCastleRooks(null);\r\n      pawnPromotionModalRef.current.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  function promotionTeamType() {\r\n    if (promotionPawn)\r\n      return (!isBlackState) ? (promotionPawn.team === \"our\" ? \"W\" : \"B\") : (promotionPawn.team === \"our\" ? \"B\" : \"W\");\r\n  }\r\n\r\n\r\n  let board = [];\r\n  for (let i = 0; i < verticalAxis.length; ++i) {\r\n    for (let j = 0; j < horizontalAxis.length; ++j) {\r\n      let image = undefined;\r\n      pieces.forEach(p => { if (p.x === i && p.y === j) image = p.image });\r\n      const dotsfound = dots.find((d) => d.i === j && d.j === i)\r\n      board.push(<Tile key={`${j},${i}`} isDotted={dotsfound ? true : false} num={i * i + j} image={image} />);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div id=\"pawn-promotion-modal\" className='hidden' ref={pawnPromotionModalRef}>\r\n        <div className='modal-body' >\r\n          <img onClick={ () => promotePawn(\"rook\")} src={`/assets/images/${promotionTeamType()}_rook.png`} />\r\n          <img onClick={ () => promotePawn(\"queen\")} src={`/assets/images/${promotionTeamType()}_queen.png`} />\r\n          <img onClick={ () => promotePawn(\"knight\")} src={`/assets/images/${promotionTeamType()}_knight.png`} />\r\n          <img onClick={ () => promotePawn(\"bishop\")} src={`/assets/images/${promotionTeamType()}_bishop.png`} />\r\n        </div>\r\n      </div>\r\n      <div /*onMouseMove={e =>  movePiece(e)}*/ onPointerDown={e => grabPiece(e)} /*onMouseUp={e => dropPiece(e)}*/ id=\"gameboard\" ref={chessBoardRef}>\r\n        {board}\r\n      </div>\r\n      <div> <b>Number of Clients  = {numClients}</b></div>\r\n      <div>\r\n        <button ref={gameStartButtonRef} onClick={startGameHandler}>Start Game</button>\r\n      </div>\r\n      <div className='turnDis' >\r\n        {turn}'s  Turn\r\n      </div>\r\n      <div>\r\n        <b> Result = {gameResult}</b>\r\n      </div>\r\n      <div>\r\n        <b> {gameOverDis}</b>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\constants.js",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Tile.js",[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Referee.js",[],[],[],"C:\\Users\\think\\Desktop\\git_projects\\chess_project\\frontend\\chess-frontend\\src\\Components\\Pieces.jsx",[],[],{"ruleId":"199","severity":1,"message":"200","line":89,"column":10,"nodeType":"201","messageId":"202","endLine":89,"endColumn":27},{"ruleId":"199","severity":1,"message":"203","line":89,"column":29,"nodeType":"201","messageId":"202","endLine":89,"endColumn":49},{"ruleId":"199","severity":1,"message":"204","line":91,"column":10,"nodeType":"201","messageId":"202","endLine":91,"endColumn":27},{"ruleId":"199","severity":1,"message":"205","line":91,"column":29,"nodeType":"201","messageId":"202","endLine":91,"endColumn":49},{"ruleId":"199","severity":1,"message":"206","line":107,"column":25,"nodeType":"201","messageId":"202","endLine":107,"endColumn":41},{"ruleId":"207","severity":1,"message":"208","line":123,"column":6,"nodeType":"209","endLine":123,"endColumn":8,"suggestions":"210"},{"ruleId":"207","severity":1,"message":"208","line":140,"column":6,"nodeType":"209","endLine":140,"endColumn":8,"suggestions":"211"},{"ruleId":"212","severity":1,"message":"213","line":144,"column":22,"nodeType":"214","messageId":"215","endLine":144,"endColumn":24},{"ruleId":"212","severity":1,"message":"213","line":144,"column":40,"nodeType":"214","messageId":"215","endLine":144,"endColumn":42},{"ruleId":"212","severity":1,"message":"216","line":156,"column":19,"nodeType":"214","messageId":"215","endLine":156,"endColumn":21},{"ruleId":"212","severity":1,"message":"213","line":165,"column":25,"nodeType":"214","messageId":"215","endLine":165,"endColumn":27},{"ruleId":"199","severity":1,"message":"217","line":201,"column":12,"nodeType":"201","messageId":"202","endLine":201,"endColumn":26},{"ruleId":"212","severity":1,"message":"216","line":299,"column":21,"nodeType":"214","messageId":"215","endLine":299,"endColumn":23},{"ruleId":"218","severity":1,"message":"219","line":377,"column":11,"nodeType":"220","endLine":377,"endColumn":110},{"ruleId":"218","severity":1,"message":"219","line":378,"column":11,"nodeType":"220","endLine":378,"endColumn":112},{"ruleId":"218","severity":1,"message":"219","line":379,"column":11,"nodeType":"220","endLine":379,"endColumn":114},{"ruleId":"218","severity":1,"message":"219","line":380,"column":11,"nodeType":"220","endLine":380,"endColumn":114},{"ruleId":"221","severity":1,"message":"222","line":20,"column":7,"nodeType":"220","endLine":20,"endColumn":75},{"ruleId":"199","severity":1,"message":"223","line":7,"column":25,"nodeType":"201","messageId":"202","endLine":7,"endColumn":38},{"ruleId":"199","severity":1,"message":"224","line":8,"column":23,"nodeType":"201","messageId":"202","endLine":8,"endColumn":34},{"ruleId":"199","severity":1,"message":"225","line":1,"column":27,"nodeType":"201","messageId":"202","endLine":1,"endColumn":36},{"ruleId":"199","severity":1,"message":"226","line":3,"column":8,"nodeType":"201","messageId":"202","endLine":3,"endColumn":17},{"ruleId":"199","severity":1,"message":"225","line":1,"column":27,"nodeType":"201","messageId":"202","endLine":1,"endColumn":36},{"ruleId":"199","severity":1,"message":"226","line":3,"column":8,"nodeType":"201","messageId":"202","endLine":3,"endColumn":17},{"ruleId":"199","severity":1,"message":"223","line":7,"column":25,"nodeType":"201","messageId":"202","endLine":7,"endColumn":38},{"ruleId":"199","severity":1,"message":"224","line":8,"column":23,"nodeType":"201","messageId":"202","endLine":8,"endColumn":34},{"ruleId":"221","severity":1,"message":"222","line":20,"column":7,"nodeType":"220","endLine":20,"endColumn":75},{"ruleId":"207","severity":1,"message":"208","line":124,"column":6,"nodeType":"209","endLine":124,"endColumn":8,"suggestions":"227"},{"ruleId":"207","severity":1,"message":"208","line":141,"column":6,"nodeType":"209","endLine":141,"endColumn":8,"suggestions":"228"},{"ruleId":"212","severity":1,"message":"213","line":145,"column":22,"nodeType":"214","messageId":"215","endLine":145,"endColumn":24},{"ruleId":"212","severity":1,"message":"213","line":145,"column":40,"nodeType":"214","messageId":"215","endLine":145,"endColumn":42},{"ruleId":"212","severity":1,"message":"216","line":157,"column":19,"nodeType":"214","messageId":"215","endLine":157,"endColumn":21},{"ruleId":"212","severity":1,"message":"213","line":166,"column":25,"nodeType":"214","messageId":"215","endLine":166,"endColumn":27},{"ruleId":"199","severity":1,"message":"229","line":211,"column":10,"nodeType":"201","messageId":"202","endLine":211,"endColumn":19},{"ruleId":"212","severity":1,"message":"216","line":238,"column":100,"nodeType":"214","messageId":"215","endLine":238,"endColumn":102},{"ruleId":"212","severity":1,"message":"216","line":242,"column":104,"nodeType":"214","messageId":"215","endLine":242,"endColumn":106},{"ruleId":"212","severity":1,"message":"216","line":246,"column":105,"nodeType":"214","messageId":"215","endLine":246,"endColumn":107},{"ruleId":"212","severity":1,"message":"216","line":294,"column":98,"nodeType":"214","messageId":"215","endLine":294,"endColumn":100},{"ruleId":"212","severity":1,"message":"216","line":298,"column":102,"nodeType":"214","messageId":"215","endLine":298,"endColumn":104},{"ruleId":"212","severity":1,"message":"216","line":302,"column":103,"nodeType":"214","messageId":"215","endLine":302,"endColumn":105},{"ruleId":"212","severity":1,"message":"216","line":381,"column":67,"nodeType":"214","messageId":"215","endLine":381,"endColumn":69},{"ruleId":"212","severity":1,"message":"216","line":391,"column":29,"nodeType":"214","messageId":"215","endLine":391,"endColumn":31},{"ruleId":"212","severity":1,"message":"216","line":489,"column":21,"nodeType":"214","messageId":"215","endLine":489,"endColumn":23},{"ruleId":"212","severity":1,"message":"216","line":586,"column":108,"nodeType":"214","messageId":"215","endLine":586,"endColumn":110},{"ruleId":"218","severity":1,"message":"219","line":686,"column":11,"nodeType":"220","endLine":686,"endColumn":110},{"ruleId":"218","severity":1,"message":"219","line":687,"column":11,"nodeType":"220","endLine":687,"endColumn":112},{"ruleId":"218","severity":1,"message":"219","line":688,"column":11,"nodeType":"220","endLine":688,"endColumn":114},{"ruleId":"218","severity":1,"message":"219","line":689,"column":11,"nodeType":"220","endLine":689,"endColumn":114},"no-unused-vars","'enPassantAttacker' is assigned a value but never used.","Identifier","unusedVar","'setEnPassantAttacker' is assigned a value but never used.","'enPassantAttacked' is assigned a value but never used.","'setEnPassantAttacked' is assigned a value but never used.","'setPromotionPawn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'room'. Either include it or remove the dependency array.","ArrayExpression",["230"],["231"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'randomTestFunc' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'setPlayerName' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'useEffect' is defined but never used.","'GameBoard' is defined but never used.",["232"],["233"],"'enPassant' is assigned a value but never used.",{"desc":"234","fix":"235"},{"desc":"234","fix":"236"},{"desc":"234","fix":"237"},{"desc":"234","fix":"238"},"Update the dependencies array to be: [room]",{"range":"239","text":"240"},{"range":"241","text":"240"},{"range":"242","text":"240"},{"range":"243","text":"240"},[5877,5879],"[room]",[6331,6333],[5901,5903],[6355,6357]]