{"ast":null,"code":"import { isBlack } from \"./GameBoard\";\nexport default class Referee {\n  isTileOccupied(x, y, boardState) {\n    const piece = boardState.find(p => p.y === x && p.x === y);\n    if (piece) {\n      return true;\n    }\n    return false;\n  }\n  isTileOccupiedByOpponent(x, y, boardState, team) {\n    const piece = boardState.find(p => p.y === x && p.x === y && p.team !== team);\n    if (piece) {\n      return true;\n    }\n    return false;\n  }\n  isEnPassantMove(py, px, y, x, type, team, boardState) {\n    if (\"pawn\" === type) {\n      const pawnDirection = \"our\" === team ? 1 : -1;\n      if (x - px === 1 || x - px === -1) {\n        if (py - y === 1 || py - y === -1) {\n          const enPassantAttackedPiece = boardState.find(p => p.y === x && p.x === y + pawnDirection && p.enPassant);\n          if (enPassantAttackedPiece) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // py = initial y coordinate of the moving piece\n  // px = initial x coordinate of the moving piece\n  // y = y-coordinate of the place where we are moving the piece\n  // x = x-coordinate of the place where we are moving the piece\n  isValidMove(py, px, y, x, type, team, boardState) {\n    console.log(team);\n    if (\"opponent\" === team) return false;\n    if (type === \"pawn\") {\n      const pawnRow = !isBlack ? \"our\" === team ? 6 : 1 : \"our\" === team ? 1 : 6;\n      const pawnDirection = !isBlack ? \"our\" === team ? 1 : -1 : \"our\" === team ? -1 : 1;\n      //MOVEMENT LOGIC \n      if (py === pawnRow) {\n        if (px === x && (py - y === 1 * pawnDirection || py - y === 2 * pawnDirection)) {\n          let retVal = false;\n          retVal = py - y === 1 * pawnDirection ? !this.isTileOccupied(x, y, boardState) : !this.isTileOccupied(x, y, boardState) && !this.isTileOccupied(x, y + pawnDirection, boardState);\n          return retVal;\n        } else if (x - px === 1 || x - px === -1) {\n          if (py - y === 1 || py - y === -1) {\n            if (this.isTileOccupiedByOpponent(x, y, boardState, team)) return true;\n          }\n        }\n      } else if (x === px && py - y === 1 * pawnDirection) {\n        return !this.isTileOccupied(x, y, boardState);\n      }\n      //ATTACKING LOGIC\n      else if (x - px === 1 || x - px === -1) {\n        if (py - y === 1 || py - y === -1) {\n          if (this.isTileOccupiedByOpponent(x, y, boardState, team)) return true;\n        }\n      }\n    } else if (type === \"knight\") {\n      const knight_prospects = [[px + 1, py - 2], [px + 1, py + 2], [px + 2, py - 1], [px + 2, py + 1], [px - 1, py - 2], [px - 1, py + 2], [px - 2, py - 1], [px - 2, py + 1]];\n      let flag = false;\n      for (let i = 0; i <= 7; ++i) {\n        const curr = knight_prospects[i];\n        if (x === curr[0] && y === curr[1]) {\n          flag = true;\n          break;\n        }\n      }\n      if (flag === false) {\n        return flag;\n      } else {\n        if (this.isTileOccupied(x, y, boardState)) {\n          if (this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n            return true;\n          } else return false;\n        } else {\n          return true;\n        }\n      }\n    } else if (\"bishop\" === type) {\n      //move and attack logic for the bishop\n      //check if the desired position is on a diagonal of the initial position.\n      const isTheMoveOnDiag = Math.abs(px - x) === Math.abs(py - y);\n      if (!isTheMoveOnDiag) return false;else {\n        const diagDir = [x - px > 0 ? 1 : -1, y - py > 0 ? 1 : -1];\n        let curr = [px + diagDir[0], py + diagDir[1]];\n        // pieces present in between.\n        // c is the number of squares in between.\n        let c = Math.abs(x - px) - 1;\n        //here we are checking whether the in-between pieces are  blockading or not \n        //if they are bloakading then we deem the move invalid\n        while (c--) {\n          if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n            return false;\n          }\n          curr[0] += diagDir[0];\n          curr[1] += diagDir[1];\n        }\n        if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n          return false;\n        }\n        return true;\n      }\n    } else if (\"rook\" === type) {\n      //move and attack logic for the rook\n      // check if the desired position is on a horizontal or vertical file of the original position  \n      const isTheMoveOnSameFile = px === x || py === y;\n      if (!isTheMoveOnSameFile) return false;else {\n        let curr = [x === px ? x : x > px ? px + 1 : px - 1, y === py ? y : y > py ? py + 1 : py - 1];\n        // pieces present in between.\n        // c is the number of squares in between.\n        let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\n        //here we are checking whether the in-between pieces are  blockading or not \n        //if they are bloakading then we deem the move invalid\n        while (c--) {\n          if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n            return false;\n          }\n          let a = curr[0],\n            b = curr[1];\n          curr[0] = x === px ? a : x > px ? a + 1 : a - 1;\n          curr[1] = y === py ? b : y > py ? b + 1 : b - 1;\n        }\n        if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n          return false;\n        }\n        return true;\n      }\n    } else if (\"queen\" === type) {\n      //move and attack logic for the queen\n      // check if the desired position is on a horizontal or vertical file or on one of the diagonals of the original position  \n      const isTheMoveOnSameFile = px === x || py === y;\n      const isTheMoveOnDiag = Math.abs(px - x) === Math.abs(py - y);\n      if (!(isTheMoveOnSameFile || isTheMoveOnDiag)) return false;else {\n        if (isTheMoveOnDiag) {\n          const diagDir = [x - px > 0 ? 1 : -1, y - py > 0 ? 1 : -1];\n          let curr = [px + diagDir[0], py + diagDir[1]];\n          // pieces present in between.\n          // c is the number of squares in between.\n          let c = Math.abs(x - px) - 1;\n          //here we are checking whether the in-between pieces are  blockading or not \n          //if they are bloakading then we deem the move invalid\n          while (c--) {\n            if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n              return false;\n            }\n            curr[0] += diagDir[0];\n            curr[1] += diagDir[1];\n          }\n          if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n            return false;\n          }\n          return true;\n        } else {\n          let curr = [x === px ? x : x > px ? px + 1 : px - 1, y === py ? y : y > py ? py + 1 : py - 1];\n          // pieces present in between.\n          // c is the number of squares in between.\n          let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\n          //here we are checking whether the in-between pieces are  blockading or not \n          //if they are bloakading then we deem the move invalid\n          while (c--) {\n            if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n              return false;\n            }\n            let a = curr[0],\n              b = curr[1];\n            curr[0] = x === px ? a : x > px ? a + 1 : a - 1;\n            curr[1] = y === py ? b : y > py ? b + 1 : b - 1;\n          }\n          if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n            return false;\n          }\n          return true;\n        }\n      }\n    } else if (\"king\" === type) {\n      const king_dir = [[px + 1, py], [px, py + 1], [px - 1, py], [px, py - 1], [px + 1, py + 1], [px + 1, py - 1], [px - 1, py - 1], [px - 1, py + 1]];\n      const piece = king_dir.find(p => p[0] === x && p[1] === y);\n      if (piece) {} else return false;\n      if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["isBlack","Referee","isTileOccupied","x","y","boardState","piece","find","p","isTileOccupiedByOpponent","team","isEnPassantMove","py","px","type","pawnDirection","enPassantAttackedPiece","enPassant","isValidMove","console","log","pawnRow","retVal","knight_prospects","flag","i","curr","isTheMoveOnDiag","Math","abs","diagDir","c","isTheMoveOnSameFile","max","a","b","king_dir"],"sources":["C:/Users/think/Desktop/Projects/Chess Project/frontend/chess-frontend/src/Components/Referee.js"],"sourcesContent":["import { isBlack } from \"./GameBoard\";\r\nexport default class Referee {\r\n\r\n    isTileOccupied(x, y, boardState) {\r\n        const piece = boardState.find((p) => (p.y === x && p.x === y));\r\n        if (piece) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    isTileOccupiedByOpponent(x, y, boardState, team) {\r\n        const piece = boardState.find((p) => (p.y === x && p.x === y && p.team !== team));\r\n        if (piece) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    isEnPassantMove(py, px, y, x, type, team, boardState) {\r\n        if (\"pawn\" === type) {\r\n            const pawnDirection = \"our\" === team ? 1 : -1;\r\n            if (x - px === 1 || x - px === -1) {\r\n                if (py - y === 1 || py - y === -1) {\r\n                    const enPassantAttackedPiece = boardState.find(p => ((p.y === x) && (p.x === y + pawnDirection) && p.enPassant));\r\n                    if (enPassantAttackedPiece) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    // py = initial y coordinate of the moving piece\r\n    // px = initial x coordinate of the moving piece\r\n    // y = y-coordinate of the place where we are moving the piece\r\n    // x = x-coordinate of the place where we are moving the piece\r\n    isValidMove(py, px, y, x, type, team, boardState) {\r\n        console.log(team);\r\n        if(\"opponent\" === team)\r\n        return false;\r\n        if (type === \"pawn\") {\r\n            const pawnRow =  (!isBlack)?((\"our\" === team) ? 6 : 1):((\"our\" === team) ? 1 : 6);\r\n            const pawnDirection =  (!isBlack)?(\"our\" === team) ? 1 : -1:(\"our\" === team) ? -1 : 1;\r\n            //MOVEMENT LOGIC \r\n            if (py === pawnRow) {\r\n                if (px === x && ((py - y) === 1 * pawnDirection || (py - y) === 2 * pawnDirection)) {\r\n                    let retVal = false;\r\n                    retVal = (py - y) === 1 * pawnDirection ? (!this.isTileOccupied(x, y, boardState)) : ((!this.isTileOccupied(x, y, boardState)) && (!this.isTileOccupied(x, y + pawnDirection, boardState)));\r\n                    return retVal;\r\n                }\r\n                else if (x - px === 1 || x - px === -1) {\r\n                    if (py - y === 1 || py - y === -1) {\r\n                        if (this.isTileOccupiedByOpponent(x, y, boardState, team))\r\n                            return true;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (x === px && ((py - y) === 1 * pawnDirection)) {\r\n                return !this.isTileOccupied(x, y, boardState);\r\n            }\r\n            //ATTACKING LOGIC\r\n            else if (x - px === 1 || x - px === -1) {\r\n                if (py - y === 1 || py - y === -1) {\r\n                    if (this.isTileOccupiedByOpponent(x, y, boardState, team))\r\n                        return true;\r\n                }\r\n            }\r\n        }\r\n        else if (type === \"knight\") {\r\n            const knight_prospects = [[px + 1, py - 2], [px + 1, py + 2], [px + 2, py - 1], [px + 2, py + 1], [px - 1, py - 2], [px - 1, py + 2], [px - 2, py - 1], [px - 2, py + 1]];\r\n            let flag = false;\r\n            for (let i = 0; i <= 7; ++i) {\r\n                const curr = knight_prospects[i];\r\n                if ((x === curr[0] && y === curr[1])) {\r\n                    flag = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (flag === false) {\r\n                return flag;\r\n            }\r\n            else {\r\n                if (this.isTileOccupied(x, y, boardState)) {\r\n                    if (this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return false;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if (\"bishop\" === type) {\r\n            //move and attack logic for the bishop\r\n            //check if the desired position is on a diagonal of the initial position.\r\n            const isTheMoveOnDiag = (Math.abs(px - x) === Math.abs(py - y));\r\n            if (!isTheMoveOnDiag)\r\n                return false;\r\n            else {\r\n                const diagDir = [((x - px) > 0 ? 1 : -1), ((y - py) > 0 ? 1 : -1)];\r\n                let curr = [px + diagDir[0], py + diagDir[1]];\r\n                // pieces present in between.\r\n                // c is the number of squares in between.\r\n                let c = Math.abs(x - px) - 1;\r\n                //here we are checking whether the in-between pieces are  blockading or not \r\n                //if they are bloakading then we deem the move invalid\r\n                while (c--) {\r\n                    if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                        return false;\r\n                    }\r\n                    curr[0] += diagDir[0];\r\n                    curr[1] += diagDir[1];\r\n                }\r\n                if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n        }\r\n        else if (\"rook\" === type) {\r\n            //move and attack logic for the rook\r\n            // check if the desired position is on a horizontal or vertical file of the original position  \r\n            const isTheMoveOnSameFile = (px === x || py === y);\r\n            if (!isTheMoveOnSameFile)\r\n                return false;\r\n            else {\r\n                let curr = [(x === px ? x : ((x > px) ? px + 1 : px - 1)), (y === py ? y : ((y > py ? py + 1 : py - 1)))];\r\n                // pieces present in between.\r\n                // c is the number of squares in between.\r\n                let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\r\n                //here we are checking whether the in-between pieces are  blockading or not \r\n                //if they are bloakading then we deem the move invalid\r\n                while (c--) {\r\n                    if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                        return false;\r\n                    }\r\n                    let a = curr[0], b = curr[1];\r\n                    curr[0] = (x === px ? a : ((x > px) ? a + 1 : a - 1));\r\n                    curr[1] = (y === py ? b : ((y > py) ? b + 1 : b - 1));\r\n                }\r\n                if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else if (\"queen\" === type) {\r\n            //move and attack logic for the queen\r\n            // check if the desired position is on a horizontal or vertical file or on one of the diagonals of the original position  \r\n            const isTheMoveOnSameFile = ((px === x || py === y));\r\n            const isTheMoveOnDiag = (Math.abs(px - x) === Math.abs(py - y));\r\n            if (!(isTheMoveOnSameFile || isTheMoveOnDiag))\r\n                return false;\r\n            else {\r\n                if (isTheMoveOnDiag) {\r\n                    const diagDir = [((x - px) > 0 ? 1 : -1), ((y - py) > 0 ? 1 : -1)];\r\n                    let curr = [px + diagDir[0], py + diagDir[1]];\r\n                    // pieces present in between.\r\n                    // c is the number of squares in between.\r\n                    let c = Math.abs(x - px) - 1;\r\n                    //here we are checking whether the in-between pieces are  blockading or not \r\n                    //if they are bloakading then we deem the move invalid\r\n                    while (c--) {\r\n                        if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                            return false;\r\n                        }\r\n                        curr[0] += diagDir[0];\r\n                        curr[1] += diagDir[1];\r\n                    }\r\n                    if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                else {\r\n                    let curr = [(x === px ? x : ((x > px) ? px + 1 : px - 1)), (y === py ? y : ((y > py ? py + 1 : py - 1)))];\r\n                    // pieces present in between.\r\n                    // c is the number of squares in between.\r\n                    let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\r\n                    //here we are checking whether the in-between pieces are  blockading or not \r\n                    //if they are bloakading then we deem the move invalid\r\n                    while (c--) {\r\n                        if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                            return false;\r\n                        }\r\n                        let a = curr[0], b = curr[1];\r\n                        curr[0] = (x === px ? a : ((x > px) ? a + 1 : a - 1));\r\n                        curr[1] = (y === py ? b : ((y > py) ? b + 1 : b - 1));\r\n                    }\r\n                    if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if (\"king\" === type) {\r\n            const king_dir = [[px + 1, py], [px, py + 1], [px - 1, py], [px, py - 1], [px + 1, py + 1], [px + 1, py - 1], [px - 1, py - 1], [px - 1, py + 1]];\r\n            const piece = king_dir.find((p) => (p[0] === x && p[1] === y));\r\n            if (piece) {\r\n\r\n            }\r\n            else\r\n                return false;\r\n\r\n            if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                return false;\r\n            }\r\n            return true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n}\r\n "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}