{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\think\\\\Desktop\\\\Projects\\\\Chess Project\\\\frontend\\\\chess-frontend\\\\src\\\\Components\\\\GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './GameBoard.css';\nimport Tile from './Tile';\nimport Referee from './Referee';\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let piece = {\n  image: String,\n  x: Number,\n  y: Number,\n  type: String,\n  team: String,\n  enPassant: Boolean\n};\n\n// array which holds the information regarding initial chess pieces and their \nconst initialBoardStateWhite = [];\nconst initialBoardStateBlack = [];\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? \"opponent\" : \"our\";\n  const type = !false ? p === 0 ? \"B\" : \"W\" : p === 0 ? \"W\" : \"B\";\n  const pawns_x_cor = p === 0 ? 1 : 6;\n  const main_piece_x_cor = p === 0 ? 0 : 7;\n  //pawns\n  for (let i = 0; i < 8; ++i) {\n    initialBoardStateWhite.push({\n      image: `assets/images/${type}_pawn.png`,\n      x: pawns_x_cor,\n      y: i,\n      type: \"pawn\",\n      team: teamType\n    });\n  }\n  //rooks\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 0,\n    type: \"rook\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 7,\n    type: \"rook\",\n    team: teamType\n  });\n  //knights\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 1,\n    type: \"knight\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 6,\n    type: \"knight\",\n    team: teamType\n  });\n  //bishops\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 2,\n    type: \"bishop\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 5,\n    type: \"bishop\",\n    team: teamType\n  });\n  //kings\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_king.png`,\n    x: main_piece_x_cor,\n    y: 4,\n    type: \"king\",\n    team: teamType\n  });\n  //queens\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_queen.png`,\n    x: main_piece_x_cor,\n    y: 3,\n    type: \"queen\",\n    team: teamType\n  });\n}\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? \"opponent\" : \"our\";\n  const type = !true ? p === 0 ? \"B\" : \"W\" : p === 0 ? \"W\" : \"B\";\n  const pawns_x_cor = p === 0 ? 1 : 6;\n  const main_piece_x_cor = p === 0 ? 0 : 7;\n  //pawns\n  for (let i = 0; i < 8; ++i) {\n    initialBoardStateBlack.push({\n      image: `assets/images/${type}_pawn.png`,\n      x: pawns_x_cor,\n      y: i,\n      type: \"pawn\",\n      team: teamType\n    });\n  }\n  //rooks\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 0,\n    type: \"rook\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 7,\n    type: \"rook\",\n    team: teamType\n  });\n  //knights\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 1,\n    type: \"knight\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 6,\n    type: \"knight\",\n    team: teamType\n  });\n  //bishops\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 2,\n    type: \"bishop\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 5,\n    type: \"bishop\",\n    team: teamType\n  });\n  //kings\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_king.png`,\n    x: main_piece_x_cor,\n    y: 4,\n    type: \"king\",\n    team: teamType\n  });\n  //queens\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_queen.png`,\n    x: main_piece_x_cor,\n    y: 3,\n    type: \"queen\",\n    team: teamType\n  });\n}\n\n//the url where the web socket server is listening for connections\nconst SOCKET_URL = `ws://192.168.29.13:8085/`;\n\n// global socket object to use for communication with the server\nconst socket = io(SOCKET_URL);\nexport default function GameBoard(_ref) {\n  _s();\n  let {\n    room,\n    isBlack\n  } = _ref;\n  // now for our component we need to join the room , so we send a socketevent which will indicate that we join the given room\n  // we will also send a socket event to leave the joined room upon component unmount\n  useEffect(() => {\n    socket.emit('joinRoomEvent', room);\n    return () => {\n      socket.emit('leaveRoomEvent', room);\n    };\n  }, []);\n  const [gameState, setGameState] = useState(\"not_started\");\n  const [numClients, setNumClients] = useState(0);\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [isBlackState, setIsBlackState] = useState(false);\n  const [pieces, setPieces] = useState(isBlack ? initialBoardStateBlack : initialBoardStateWhite);\n  // const [pieces, setPieces] = useState([]);\n  const chessBoardRef = useRef(null);\n  const pawnPromotionModalRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState(null);\n  const gameStartButtonRef = useRef(null);\n  useEffect(() => {\n    if (sessionStorage.getItem(\"color\") !== null) {\n      setGameState(\"started\");\n      sessionStorage.getItem(\"color\") === \"black\" ? setIsBlackState(true) : setIsBlackState(false);\n      socket.emit('getPieceInfo', JSON.stringify({\n        'color': sessionStorage.getItem(\"color\"),\n        'roomId': room\n      }));\n    }\n  }, []);\n  useEffect(() => {\n    if (isBlackState == true) {\n      setPieces(initialBoardStateBlack);\n      sessionStorage.setItem('color', \"black\");\n    } else {\n      setPieces(initialBoardStateWhite);\n      sessionStorage.setItem('color', 'white');\n    }\n  }, [isBlackState]);\n  useEffect(() => {\n    setInterval(() => {\n      fetch('http://192.168.29.13:8080/api/num_clients', {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: room\n      }).then(response => response.json()).then(data => {\n        setNumClients(data[\"num_clients\"]);\n      }).catch(error => console.error('Error:', error));\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    if (gameStartButtonRef) {\n      /* here we check if the game has already started / finished , we do not display start button*/\n      if (gameState != \"not_started\") {\n        if (!gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.add('two_clients');\n      }\n      if (numClients != 2) {\n        if (!gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.add('two_clients');\n      } else {\n        if (gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.remove('two_clients');\n      }\n    }\n  }, [numClients]);\n  useEffect(() => {\n    if (gameStartButtonRef) {\n      /* here we check if the game has already started / finished , we do not display start button*/\n      if (gameState != \"not_started\") {\n        if (!gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.add('two_clients');\n      }\n    }\n  }, [gameState]);\n\n  // socket.emit('clientToServer', JSON.stringify({ \"pieceArr\": pieces, \"team\": isBlack ? \"black\" : \"white\" }));\n\n  // socket.on(\"initial_state\", (data) => {\n  //   setPieces(JSON.parse(data));\n  // })\n  socket.on(\"pieceMovementServerToClient\", data => {\n    setPieces(JSON.parse(data));\n  });\n  socket.on(\"youAreWhite\", () => {\n    setIsBlackState(false);\n    setGameState(\"started\");\n  });\n  socket.on(\"youAreBlack\", () => {\n    setIsBlackState(true);\n    setGameState(\"started\");\n  });\n  socket.on(\"colorOnMount\", () => {});\n  function startGameHandler() {\n    socket.emit('startGameEvent', room);\n  }\n  function grabPiece(e) {\n    const chessboard = chessBoardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE));\n      const x = e.clientX;\n      const y = e.clientY;\n      element.style.position = \"absolute\";\n      element.style.left = `${x - GRID_SIZE / 2}px`;\n      element.style.top = `${y - GRID_SIZE / 2}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessBoardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft;\n      const minY = chessboard.offsetTop;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight;\n      const x = e.clientX;\n      const y = e.clientY;\n      activePiece.style.position = \"absolute\";\n      if (x < minX) {\n        activePiece.style.left = `${minX - GRID_SIZE / 2}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX - GRID_SIZE / 2}px`;\n      } else activePiece.style.left = `${x - GRID_SIZE / 2}px`;\n      if (y < minY) {\n        activePiece.style.top = `${minY - GRID_SIZE / 2}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY - GRID_SIZE / 2}px`;\n      } else activePiece.style.top = `${y - GRID_SIZE / 2}px`;\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessBoardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\n      const currentPiece = pieces.find(p => p.y === gridX && p.x === gridY);\n      if (currentPiece) {\n        const validMove = referee.isValidMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = referee.isEnPassantMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirection = \"our\" === currentPiece.team ? 1 : -1;\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (currentPiece === piece) {\n              piece.enPassant = false;\n              piece.x = y;\n              piece.y = x;\n              results.push(piece);\n            } else if (!(piece.x === y + pawnDirection && piece.y === x)) {\n              if (\"pawn\" === piece.type) piece.enPassant = false;\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n          socket.emit('pieceMovementClientToServer', JSON.stringify({\n            \"pieceArr\": pieces,\n            \"team\": isBlackState ? \"black\" : \"white\",\n            \"roomId\": room\n          }));\n        } else {\n          if (validMove) {\n            if (\"pawn\" === currentPiece.type) {\n              const updatedPieces = pieces.reduce((results, piece) => {\n                if (currentPiece === piece) {\n                  if (piece.type === \"pawn\" && Math.abs(y - gridY) === 2) {\n                    piece.enPassant = true;\n                  } else {\n                    piece.enPassant = false;\n                  }\n                  piece.x = y;\n                  piece.y = x;\n                  if (0 === piece.x || 7 === piece.x) {\n                    setPromotionPawn(currentPiece);\n                    pawnPromotionModalRef.current.classList.remove('hidden');\n                  }\n                  results.push(piece);\n                } else if (!(piece.x === y && piece.y === x)) {\n                  if (\"pawn\" === piece.type) piece.enPassant = false;\n                  results.push(piece);\n                }\n                return results;\n              }, []);\n              setPieces(updatedPieces);\n              socket.emit('pieceMovementClientToServer', JSON.stringify({\n                \"pieceArr\": pieces,\n                \"team\": isBlackState ? \"black\" : \"white\",\n                \"roomId\": room\n              }));\n            } else if (\"knight\" === currentPiece.type || \"bishop\" === currentPiece.type || \"rook\" === currentPiece.type || \"queen\" === currentPiece.type || \"king\" === currentPiece.type) {\n              const updatedPieces = pieces.reduce((results, piece) => {\n                if (currentPiece === piece) {\n                  piece.x = y;\n                  piece.y = x;\n                  results.push(piece);\n                } else if (!(piece.x === y && piece.y === x)) {\n                  results.push(piece);\n                }\n                return results;\n              }, []);\n              setPieces(updatedPieces);\n              socket.emit('pieceMovementClientToServer', JSON.stringify({\n                \"pieceArr\": pieces,\n                \"team\": isBlackState ? \"black\" : \"white\",\n                \"roomId\": room\n              }));\n            }\n\n            // if (referee.inCheck(pieces)) {\n            //   console.log(\"Check\");\n            //   setOppInCheck(true);\n            //   socket.emit(\"clientToServerCheck\", \"Check\");\n            // }\n          } else {\n            // RESETS  THE PIECE POSITION\n            activePiece.style.position = \"relative\";\n            activePiece.style.removeProperty('top');\n            activePiece.style.removeProperty('left');\n          }\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  function promotePawn(type) {\n    if (promotionPawn) {\n      const updatedPieces = pieces.reduce((results, piece) => {\n        if (promotionPawn === piece) {\n          piece.type = type;\n          piece.image = !isBlack ? piece.team === \"our\" ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png` : piece.team === \"our\" ? `/assets/images/B_${type}.png` : `/assets/images/W_${type}.png`;\n        }\n        results.push(piece);\n        return results;\n      }, []);\n      setPieces(updatedPieces);\n      socket.emit('clientToServer', JSON.stringify({\n        \"pieceArr\": updatedPieces,\n        \"team\": isBlack ? \"black\" : \"white\",\n        \"roomId\": room\n      }));\n      pawnPromotionModalRef.current.classList.add('hidden');\n    }\n  }\n  function promotionTeamType() {\n    if (promotionPawn) return !isBlack ? promotionPawn.team === \"our\" ? \"W\" : \"B\" : promotionPawn.team === \"our\" ? \"B\" : \"W\";\n  }\n  let board = [];\n  for (let i = 0; i < verticalAxis.length; ++i) {\n    for (let j = 0; j < horizontalAxis.length; ++j) {\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) image = p.image;\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        num: i * i + j,\n        image: image\n      }, `${i}${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: pawnPromotionModalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"rook\"),\n          src: `/assets/images/${promotionTeamType()}_rook.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"queen\"),\n          src: `/assets/images/${promotionTeamType()}_queen.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"knight\"),\n          src: `/assets/images/${promotionTeamType()}_knight.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"bishop\"),\n          src: `/assets/images/${promotionTeamType()}_bishop.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onPointerMove: e => movePiece(e),\n      onPointerDown: e => grabPiece(e),\n      onPointerUp: e => dropPiece(e),\n      id: \"gameboard\",\n      ref: chessBoardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Number of Clients  = \", numClients]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: gameStartButtonRef,\n        onClick: startGameHandler,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(GameBoard, \"+QC/qb4r1JfoO5Lkj6RWgE8ZaP8=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Tile","Referee","GRID_SIZE","horizontalAxis","verticalAxis","io","piece","image","String","x","Number","y","type","team","enPassant","Boolean","initialBoardStateWhite","initialBoardStateBlack","p","teamType","pawns_x_cor","main_piece_x_cor","i","push","SOCKET_URL","socket","GameBoard","room","isBlack","emit","gameState","setGameState","numClients","setNumClients","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","isBlackState","setIsBlackState","pieces","setPieces","chessBoardRef","pawnPromotionModalRef","referee","promotionPawn","setPromotionPawn","gameStartButtonRef","sessionStorage","getItem","JSON","stringify","setItem","setInterval","fetch","method","headers","body","then","response","json","data","catch","error","console","current","classList","contains","add","remove","on","parse","startGameHandler","grabPiece","e","chessboard","element","target","Math","floor","clientX","offsetLeft","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","validMove","isValidMove","isEnPassantMove","pawnDirection","updatedPieces","reduce","results","abs","removeProperty","promotePawn","promotionTeamType","board","length","j","undefined","forEach"],"sources":["C:/Users/think/Desktop/Projects/Chess Project/frontend/chess-frontend/src/Components/GameBoard.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport './GameBoard.css'\r\nimport Tile from './Tile';\r\nimport Referee from './Referee';\r\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\r\nimport io from 'socket.io-client';\r\n\r\nexport let piece = {\r\n  image: String,\r\n  x: Number,\r\n  y: Number,\r\n  type: String,\r\n  team: String,\r\n  enPassant: Boolean\r\n}\r\n\r\n// array which holds the information regarding initial chess pieces and their \r\nconst initialBoardStateWhite = [];\r\n\r\nconst initialBoardStateBlack = [];\r\n\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const type = (!false) ? ((p === 0) ? \"B\" : \"W\") : ((p === 0) ? \"W\" : \"B\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateWhite.push({ image: `assets/images/${type}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_king.png`, x: main_piece_x_cor, y: 4, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_queen.png`, x: main_piece_x_cor, y: 3, type: \"queen\", team: teamType });\r\n}\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const type = (!true) ? ((p === 0) ? \"B\" : \"W\") : ((p === 0) ? \"W\" : \"B\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateBlack.push({ image: `assets/images/${type}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_king.png`, x: main_piece_x_cor, y: 4, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_queen.png`, x: main_piece_x_cor, y: 3, type: \"queen\", team: teamType });\r\n}\r\n\r\n//the url where the web socket server is listening for connections\r\nconst SOCKET_URL = `ws://192.168.29.13:8085/`;\r\n\r\n// global socket object to use for communication with the server\r\nconst socket = io(SOCKET_URL);\r\n\r\n\r\nexport default function GameBoard({ room, isBlack }) {\r\n  // now for our component we need to join the room , so we send a socketevent which will indicate that we join the given room\r\n  // we will also send a socket event to leave the joined room upon component unmount\r\n  useEffect(() => {\r\n    socket.emit('joinRoomEvent', room);\r\n    return () => {\r\n      socket.emit('leaveRoomEvent', room);\r\n    }\r\n  }, []);\r\n\r\n  const [gameState, setGameState] = useState(\"not_started\");\r\n  const [numClients, setNumClients] = useState(0);\r\n  const [activePiece, setActivePiece] = useState(null);\r\n  const [gridX, setGridX] = useState(0);\r\n  const [gridY, setGridY] = useState(0);\r\n  const [isBlackState, setIsBlackState] = useState(false);\r\n  const [pieces, setPieces] = useState(isBlack ? initialBoardStateBlack : initialBoardStateWhite);\r\n  // const [pieces, setPieces] = useState([]);\r\n  const chessBoardRef = useRef(null);\r\n  const pawnPromotionModalRef = useRef(null);\r\n  const referee = new Referee();\r\n  const [promotionPawn, setPromotionPawn] = useState(null);\r\n  const gameStartButtonRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (sessionStorage.getItem(\"color\") !== null) {\r\n      setGameState(\"started\");\r\n      sessionStorage.getItem(\"color\") === \"black\" ? setIsBlackState(true) : setIsBlackState(false);\r\n      socket.emit('getPieceInfo', JSON.stringify({'color':sessionStorage.getItem(\"color\"),'roomId':room}));\r\n    } \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isBlackState == true) {\r\n      setPieces(initialBoardStateBlack);\r\n      sessionStorage.setItem('color', \"black\");\r\n    }\r\n    else {\r\n      setPieces(initialBoardStateWhite);\r\n      sessionStorage.setItem('color', 'white');\r\n    }\r\n  }, [isBlackState]);\r\n\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      fetch('http://192.168.29.13:8080/api/num_clients', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: room\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          setNumClients(data[\"num_clients\"]);\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }, 3000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (gameStartButtonRef) {\r\n\r\n      /* here we check if the game has already started / finished , we do not display start button*/\r\n      if (gameState != \"not_started\") {\r\n        if (!gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.add('two_clients');\r\n      }\r\n      if (numClients != 2) {\r\n        if (!gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.add('two_clients');\r\n      }\r\n      else {\r\n        if (gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.remove('two_clients');\r\n      }\r\n    }\r\n\r\n  }, [numClients])\r\n\r\n  useEffect(() => {\r\n    if (gameStartButtonRef) {\r\n\r\n      /* here we check if the game has already started / finished , we do not display start button*/\r\n      if (gameState != \"not_started\") {\r\n        if (!gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.add('two_clients');\r\n      }\r\n    }\r\n  }, [gameState])\r\n\r\n  // socket.emit('clientToServer', JSON.stringify({ \"pieceArr\": pieces, \"team\": isBlack ? \"black\" : \"white\" }));\r\n\r\n\r\n  // socket.on(\"initial_state\", (data) => {\r\n  //   setPieces(JSON.parse(data));\r\n  // })\r\n  socket.on(\"pieceMovementServerToClient\", (data) => {\r\n    setPieces(JSON.parse(data));\r\n  });\r\n  socket.on(\"youAreWhite\", () => {\r\n    setIsBlackState(false);\r\n    setGameState(\"started\");\r\n  });\r\n  socket.on(\"youAreBlack\", () => {\r\n    setIsBlackState(true);\r\n    setGameState(\"started\");\r\n  });\r\n  socket.on(\"colorOnMount\", () => {\r\n   \r\n    \r\n  });\r\n\r\n  function startGameHandler() {\r\n    socket.emit('startGameEvent', room);\r\n  }\r\n\r\n  function grabPiece(e) {\r\n    const chessboard = chessBoardRef.current;\r\n    const element = (e.target);\r\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\r\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\r\n      setGridY(Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE));\r\n      const x = e.clientX;\r\n      const y = e.clientY;\r\n      element.style.position = \"absolute\";\r\n      element.style.left = `${x - GRID_SIZE / 2}px`;\r\n      element.style.top = `${y - GRID_SIZE / 2}px`;\r\n      setActivePiece(element);\r\n    }\r\n  }\r\n\r\n  function movePiece(e) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const minX = chessboard.offsetLeft;\r\n      const minY = chessboard.offsetTop;\r\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth;\r\n      const maxY = chessboard.offsetTop + chessboard.clientHeight;\r\n      const x = e.clientX;\r\n      const y = e.clientY;\r\n      activePiece.style.position = \"absolute\";\r\n\r\n      if (x < minX) {\r\n        activePiece.style.left = `${minX - GRID_SIZE / 2}px`;\r\n      }\r\n      else if (x > maxX) {\r\n        activePiece.style.left = `${maxX - GRID_SIZE / 2}px`;\r\n      }\r\n      else activePiece.style.left = `${x - GRID_SIZE / 2}px`;\r\n\r\n      if (y < minY) {\r\n        activePiece.style.top = `${minY - GRID_SIZE / 2}px`;\r\n      }\r\n      else if (y > maxY) {\r\n        activePiece.style.top = `${maxY - GRID_SIZE / 2}px`;\r\n\r\n      }\r\n      else activePiece.style.top = `${y - GRID_SIZE / 2}px`;\r\n    }\r\n  }\r\n\r\n  function dropPiece(e) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\r\n      const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\r\n      const currentPiece = pieces.find(p => p.y === gridX && p.x === gridY);\r\n      if (currentPiece) {\r\n        const validMove = referee.isValidMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\r\n        const isEnPassantMove = referee.isEnPassantMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\r\n        const pawnDirection = \"our\" === currentPiece.team ? 1 : -1;\r\n        if (isEnPassantMove) {\r\n          const updatedPieces = pieces.reduce((results, piece) => {\r\n            if (currentPiece === piece) {\r\n              piece.enPassant = false;\r\n              piece.x = y;\r\n              piece.y = x;\r\n              results.push(piece);\r\n            }\r\n            else if (!(piece.x === y + pawnDirection && piece.y === x)) {\r\n              if (\"pawn\" === piece.type)\r\n                piece.enPassant = false;\r\n              results.push(piece);\r\n            }\r\n            return results;\r\n          }, []);\r\n          setPieces(updatedPieces);\r\n          socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": pieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\r\n        }\r\n        else {\r\n          if (validMove) {\r\n            if (\"pawn\" === currentPiece.type) {\r\n              const updatedPieces = pieces.reduce((results, piece) => {\r\n                if (currentPiece === piece) {\r\n                  if (piece.type === \"pawn\" && Math.abs(y - gridY) === 2) {\r\n                    piece.enPassant = true;\r\n                  }\r\n                  else {\r\n                    piece.enPassant = false;\r\n                  }\r\n                  piece.x = y;\r\n                  piece.y = x;\r\n                  if (0 === piece.x || 7 === piece.x) {\r\n                    setPromotionPawn(currentPiece);\r\n                    pawnPromotionModalRef.current.classList.remove('hidden');\r\n                  }\r\n                  results.push(piece);\r\n                }\r\n                else if (!(piece.x === y && piece.y === x)) {\r\n                  if (\"pawn\" === piece.type)\r\n                    piece.enPassant = false;\r\n                  results.push(piece);\r\n                }\r\n                return results;\r\n              }, []);\r\n              setPieces(updatedPieces);\r\n              socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": pieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\r\n            }\r\n            else if (\"knight\" === currentPiece.type || \"bishop\" === currentPiece.type || \"rook\" === currentPiece.type || \"queen\" === currentPiece.type || \"king\" === currentPiece.type) {\r\n              const updatedPieces = pieces.reduce((results, piece) => {\r\n                if (currentPiece === piece) {\r\n                  piece.x = y;\r\n                  piece.y = x;\r\n                  results.push(piece);\r\n                }\r\n                else if (!(piece.x === y && piece.y === x)) {\r\n                  results.push(piece);\r\n                }\r\n                return results;\r\n              }, []);\r\n              setPieces(updatedPieces);\r\n              socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": pieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\r\n            }\r\n\r\n            // if (referee.inCheck(pieces)) {\r\n            //   console.log(\"Check\");\r\n            //   setOppInCheck(true);\r\n            //   socket.emit(\"clientToServerCheck\", \"Check\");\r\n            // }\r\n          }\r\n          else {\r\n            // RESETS  THE PIECE POSITION\r\n            activePiece.style.position = \"relative\";\r\n            activePiece.style.removeProperty('top');\r\n            activePiece.style.removeProperty('left');\r\n          }\r\n        }\r\n\r\n      }\r\n      setActivePiece(null);\r\n    }\r\n  }\r\n\r\n  function promotePawn(type) {\r\n    if (promotionPawn) {\r\n      const updatedPieces = pieces.reduce((results, piece) => {\r\n        if (promotionPawn === piece) {\r\n          piece.type = type;\r\n          piece.image = (!isBlack) ? ((piece.team === \"our\") ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png`) : ((piece.team === \"our\") ? `/assets/images/B_${type}.png` : `/assets/images/W_${type}.png`);\r\n        }\r\n        results.push(piece);\r\n        return results;\r\n      }, []);\r\n      setPieces(updatedPieces);\r\n      socket.emit('clientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlack ? \"black\" : \"white\", \"roomId\": room }));\r\n      pawnPromotionModalRef.current.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  function promotionTeamType() {\r\n    if (promotionPawn)\r\n      return (!isBlack) ? (promotionPawn.team === \"our\" ? \"W\" : \"B\") : (promotionPawn.team === \"our\" ? \"B\" : \"W\");\r\n  }\r\n\r\n  let board = [];\r\n  for (let i = 0; i < verticalAxis.length; ++i) {\r\n    for (let j = 0; j < horizontalAxis.length; ++j) {\r\n      let image = undefined;\r\n      pieces.forEach(p => { if (p.x === i && p.y === j) image = p.image });\r\n      board.push(<Tile key={`${i}${j}`} num={i * i + j} image={image} />);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div id=\"pawn-promotion-modal\" className='hidden' ref={pawnPromotionModalRef}>\r\n        <div className='modal-body' >\r\n          <img onClick={() => promotePawn(\"rook\")} src={`/assets/images/${promotionTeamType()}_rook.png`} />\r\n          <img onClick={() => promotePawn(\"queen\")} src={`/assets/images/${promotionTeamType()}_queen.png`} />\r\n          <img onClick={() => promotePawn(\"knight\")} src={`/assets/images/${promotionTeamType()}_knight.png`} />\r\n          <img onClick={() => promotePawn(\"bishop\")} src={`/assets/images/${promotionTeamType()}_bishop.png`} />\r\n        </div>\r\n\r\n      </div>\r\n      <div onPointerMove={e => movePiece(e)} onPointerDown={e => grabPiece(e)} onPointerUp={e => dropPiece(e)} id=\"gameboard\" ref={chessBoardRef}>\r\n        {board}\r\n      </div>\r\n      <div> <b>Number of Clients  = {numClients}</b></div>\r\n      <div>\r\n        <button ref={gameStartButtonRef} onClick={startGameHandler}>Start Game</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}