{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\think\\\\Desktop\\\\git_projects\\\\chess_project\\\\frontend\\\\chess-frontend\\\\src\\\\Components\\\\GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './GameBoard.css';\nimport Tile from './Tile';\nimport Referee from './Referee';\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\nimport io from 'socket.io-client';\nimport IP_ADDRESS from '../ip_add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let piece = {\n  image: String,\n  x: Number,\n  y: Number,\n  type: String,\n  team: String,\n  enPassant: Boolean\n};\n\n// array which holds the information regarding initial chess pieces and their \nconst initialBoardStateWhite = [];\nconst initialBoardStateBlack = [];\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? \"opponent\" : \"our\";\n  const type = !false ? p === 0 ? \"B\" : \"W\" : p === 0 ? \"W\" : \"B\";\n  const pawns_x_cor = p === 0 ? 1 : 6;\n  const main_piece_x_cor = p === 0 ? 0 : 7;\n  //pawns\n  for (let i = 0; i < 8; ++i) {\n    initialBoardStateWhite.push({\n      image: `assets/images/${type}_pawn.png`,\n      x: pawns_x_cor,\n      y: i,\n      type: \"pawn\",\n      team: teamType\n    });\n  }\n  //rooks\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 0,\n    type: \"rook\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 7,\n    type: \"rook\",\n    team: teamType\n  });\n  //knights\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 1,\n    type: \"knight\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 6,\n    type: \"knight\",\n    team: teamType\n  });\n  //bishops\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 2,\n    type: \"bishop\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 5,\n    type: \"bishop\",\n    team: teamType\n  });\n  //kings\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_king.png`,\n    x: main_piece_x_cor,\n    y: 4,\n    type: \"king\",\n    team: teamType\n  });\n  //queens\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_queen.png`,\n    x: main_piece_x_cor,\n    y: 3,\n    type: \"queen\",\n    team: teamType\n  });\n}\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? \"opponent\" : \"our\";\n  const type = !true ? p === 0 ? \"B\" : \"W\" : p === 0 ? \"W\" : \"B\";\n  const pawns_x_cor = p === 0 ? 1 : 6;\n  const main_piece_x_cor = p === 0 ? 0 : 7;\n  //pawns\n  for (let i = 0; i < 8; ++i) {\n    initialBoardStateBlack.push({\n      image: `assets/images/${type}_pawn.png`,\n      x: pawns_x_cor,\n      y: i,\n      type: \"pawn\",\n      team: teamType\n    });\n  }\n  //rooks\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 0,\n    type: \"rook\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 7,\n    type: \"rook\",\n    team: teamType\n  });\n  //knights\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 1,\n    type: \"knight\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 6,\n    type: \"knight\",\n    team: teamType\n  });\n  //bishops\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 2,\n    type: \"bishop\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 5,\n    type: \"bishop\",\n    team: teamType\n  });\n  //kings\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_king.png`,\n    x: main_piece_x_cor,\n    y: 3,\n    type: \"king\",\n    team: teamType\n  });\n  //queens\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_queen.png`,\n    x: main_piece_x_cor,\n    y: 4,\n    type: \"queen\",\n    team: teamType\n  });\n}\n\n//the url where the web socket server is listening for connections\nconst SOCKET_URL = `ws://${IP_ADDRESS}:8085/`;\n\n// global socket object to use for communication with the server\nconst socket = io(SOCKET_URL);\nexport default function GameBoard(_ref) {\n  _s();\n  let {\n    room,\n    isBlack\n  } = _ref;\n  // this is a state variable that is used to determine the state of the game ,\n  // we need to fetch this from the backend on component mount, but the fetching should be performed after 1 second  \n  const [gameState, setGameState] = useState(\"not_started\");\n\n  // state variable to hold the number of clients joined at any given point of time\n  const [numClients, setNumClients] = useState(0);\n  const [gameOverDis, setGameOverDis] = useState(null);\n  const [enPassantAttackers, setEnPassantAttackers] = useState(null);\n  const [gameResult, setGameResult] = useState(null);\n\n  // state variable to determine if the state is white or black\n  const [isBlackState, setIsBlackState] = useState(false);\n  const [activePiece, setActivePiece] = useState(null);\n  // const [gridX, setGridX] = useState(0);\n  // const [gridY, setGridY] = useState(0);\n  // const [pieces, setPieces] = useState(isBlack ? initialBoardStateBlack : initialBoardStateWhite);\n  const [pieces, setPieces] = useState(initialBoardStateWhite);\n  const chessBoardRef = useRef(null);\n  const pawnPromotionModalRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState(null);\n  const gameStartButtonRef = useRef(null);\n  const [turn, setTurn] = useState(null);\n  const [dots, setDots] = useState([]);\n  const [enPassantAttackCoordinates, setenPassantAttackCoordinates] = useState(null);\n\n  // JOIN THE ROOM ON COMPONENT MOUNT + LEAVE THE ROOM ON Component Unmount\n  useEffect(() => {\n    let color = \"white\";\n    if (sessionStorage.getItem(room) != null) {\n      color = sessionStorage.getItem(room);\n      color === \"white\" ? setIsBlackState(false) : setIsBlackState(true);\n    }\n    socket.emit('joinRoomEvent', JSON.stringify({\n      'room': `${room}`,\n      'color': `${color}`\n    }));\n    return () => {\n      socket.emit('leaveRoomEvent', room);\n    };\n  }, []);\n  useEffect(() => {\n    setInterval(() => {\n      fetch(`http://${IP_ADDRESS}:8080/api/num_clients`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: room\n      }).then(response => response.json()).then(data => {\n        setNumClients(data[\"num_clients\"]);\n      }).catch(error => console.error('Error:', error));\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    if (gameStartButtonRef) {\n      if (numClients != 2 || gameState != 'not_started') {\n        if (!gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.add('two_clients');\n      } else {\n        if (gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.remove('two_clients');\n      }\n    }\n  }, [numClients, gameState]);\n  useEffect(() => {\n    if (gameState == \"completed\") {\n      setGameOverDis(\"GAME IS OVER !!! PLEASE START NEW GAME !! \");\n    }\n  }, [gameState]);\n  socket.on(\"pieceInfo\", data => {\n    const jsondata = JSON.parse(data);\n    setPieces(jsondata[\"pieces\"]);\n    setGameState(jsondata[\"game_state\"]);\n    if (jsondata[\"turn\"] != \"NA\") setTurn(jsondata[\"turn\"]);\n  });\n  socket.on(\"newMoveUpdateServerToClient\", data => {\n    const jsondata = JSON.parse(data);\n    setPieces(jsondata[\"pieces\"]);\n    if (turn === \"white\") setTurn(\"black\");else setTurn(\"white\");\n  });\n  socket.on(\"gameEndEvent\", data => {\n    const jsondata = JSON.parse(data);\n    const res = jsondata[\"result\"];\n    const resDis = res === \"white\" ? \"WHITE WON\" : res === \"black\" ? \"BLACK WON\" : \"STALEMATE\";\n    setGameResult(resDis);\n    setGameState(\"completed\");\n    //result will be (\"black\" / \"white\" / \"\")  --- FE TBD\n  });\n\n  socket.on(\"colorMsg\", data => {\n    data === \"white\" ? setIsBlackState(false) : setIsBlackState(true);\n    data === \"white\" ? setPieces(initialBoardStateWhite) : setPieces(initialBoardStateBlack);\n    setGameState(\"started\");\n    setTurn(\"white\");\n    sessionStorage.setItem(room, data);\n  });\n  function startGameHandler() {\n    socket.emit('startGameEvent', room);\n  }\n  socket.on('enPassant', data => {\n    const jsondata = JSON.parse(data);\n    const x = jsondata[\"x\"];\n    const y = jsondata[\"y\"];\n    const attackers = pieces.filter(p => p.x === y && p.type === \"pawn\" && p.team === \"our\" && Math.abs(p.y - x) === 1);\n    setEnPassantAttackers(attackers);\n    setEnPassant(true);\n    setenPassantAttackCoordinates({\n      x: x,\n      y: y\n    });\n  });\n  const [pawnPromoteCoordinates, setPawnPromoteCoordinates] = useState(null);\n  const [enPassant, setEnPassant] = useState(null);\n  function handlePawnPromotion(activePiece, x, y, captureFlag) {\n    setPromotionPawn(activePiece);\n    setPawnPromoteCoordinates({\n      x: y,\n      y: x\n    });\n    pawnPromotionModalRef.current.classList.remove('hidden');\n  }\n  function normalMove(x, y) {\n    const a = dots.find(d => d.i === x && d.j === y);\n    if (a) {\n      if (activePiece && activePiece.type === \"pawn\" && (y === 0 || y === 7)) {\n        handlePawnPromotion(activePiece, x, y, false);\n      } else {\n        if (activePiece.type === \"pawn\" && Math.abs(activePiece.x - y) === 2) {\n          socket.emit(\"eligibleForEnPassant\", JSON.stringify({\n            room: room,\n            x: x,\n            y: y\n          }));\n        }\n        const updatedPieces = [];\n        pieces.forEach(p => {\n          if (p === activePiece) {\n            if (p.type === \"king\") {\n              socket.emit('kingMove', JSON.stringify({\n                'room': `${room}`,\n                'color': `${isBlackState == true ? \"black\" : \"white\"}`\n              }));\n            } else if (p.type === \"rook\" && p.x === 7 && p.y === 7) {\n              socket.emit('kingRookMove', JSON.stringify({\n                'room': `${room}`,\n                'color': `${isBlackState == true ? \"black\" : \"white\"}`\n              }));\n            } else if (p.type === \"rook\" && p.x === 7 && p.y === 0) {\n              socket.emit('queenRookMove', JSON.stringify({\n                'room': `${room}`,\n                'color': `${isBlackState == true ? \"black\" : \"white\"}`\n              }));\n            }\n            p.x = y;\n            p.y = x;\n            updatedPieces.push(p);\n          } else {\n            updatedPieces.push(p);\n          }\n        });\n        setPieces(updatedPieces);\n        setDots([]);\n        socket.emit(\"newMoveToServer\", JSON.stringify({\n          pieces: updatedPieces,\n          room: room,\n          color: isBlackState ? \"black\" : \"white\"\n        }));\n        if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n          if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n            socket.emit(\"checkmate\", JSON.stringify({\n              room: room,\n              color: isBlackState ? \"black\" : \"white\"\n            }));\n          }\n        } else {\n          if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n            socket.emit(\"stalemate\", JSON.stringify({\n              room: room,\n              color: isBlackState ? \"black\" : \"white\"\n            }));\n          }\n        }\n        if (turn === \"white\") setTurn(\"black\");else setTurn(\"white\");\n        setActivePiece(null);\n        setEnPassant(null);\n        setEnPassantAttackers(null);\n        setenPassantAttackCoordinates(null);\n        setCastleRooks(null);\n      }\n    }\n  }\n  function captureMove(a) {\n    if (activePiece && activePiece.type === \"pawn\" && (a.j === 0 || a.j === 7)) {\n      handlePawnPromotion(activePiece, a.i, a.j, true);\n    } else {\n      const updatedPieces = [];\n      pieces.forEach(p => {\n        if (p === activePiece) {\n          if (p.type === \"king\") {\n            socket.emit('kingMove', JSON.stringify({\n              'room': `${room}`,\n              'color': `${isBlackState == true ? \"black\" : \"white\"}`\n            }));\n          } else if (p.type === \"rook\" && p.x === 7 && p.y === 7) {\n            socket.emit('kingRookMove', JSON.stringify({\n              'room': `${room}`,\n              'color': `${isBlackState == true ? \"black\" : \"white\"}`\n            }));\n          } else if (p.type === \"rook\" && p.x === 7 && p.y === 0) {\n            socket.emit('queenRookMove', JSON.stringify({\n              'room': `${room}`,\n              'color': `${isBlackState == true ? \"black\" : \"white\"}`\n            }));\n          }\n          if (enPassantAttackers) {\n            enPassantAttackers.forEach(attacker => {\n              if (attacker.x === p.x && attacker.y === p.y && enPassantAttackCoordinates.y === a.j && enPassantAttackCoordinates.x === a.i) {\n                p.x = enPassantAttackCoordinates.y - 1;\n                p.y = enPassantAttackCoordinates.x;\n              }\n            });\n          } else {\n            p.x = a.j;\n            p.y = a.i;\n          }\n          updatedPieces.push(p);\n        } else {\n          if (!(p.x === a.j && p.y === a.i)) {\n            updatedPieces.push(p);\n          }\n        }\n      });\n      setPieces(updatedPieces);\n      setDots([]);\n      socket.emit(\"newMoveToServer\", JSON.stringify({\n        pieces: updatedPieces,\n        room: room,\n        color: isBlackState ? \"black\" : \"white\"\n      }));\n      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n          socket.emit(\"checkmate\", JSON.stringify({\n            room: room,\n            color: isBlackState ? \"black\" : \"white\"\n          }));\n        }\n      } else {\n        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n          socket.emit(\"stalemate\", JSON.stringify({\n            room: room,\n            color: isBlackState ? \"black\" : \"white\"\n          }));\n        }\n      }\n      if (turn === \"white\") setTurn(\"black\");else setTurn(\"white\");\n      setActivePiece(null);\n      setEnPassant(null);\n      setEnPassantAttackers(null);\n      setenPassantAttackCoordinates(null);\n      setCastleRooks(null);\n    }\n  }\n  const [castleRooks, setCastleRooks] = useState(null);\n  function validMovesDisplay(x, y) {\n    const currentPiece = pieces.find(p => p.y === x && p.x === y);\n    const dotsArr = [];\n    for (let i = 0; i <= 7; ++i) {\n      for (let j = 0; j <= 7; j++) {\n        const a = referee.isValidMove(y, x, j, i, currentPiece.type, currentPiece.team, pieces, true);\n        if (a) {\n          const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, i, j, pieces);\n          if (!referee.inCheck(newBoardState, currentPiece.team)) {\n            dotsArr.push({\n              i: i,\n              j: j\n            });\n          }\n        }\n      }\n    }\n    if (enPassantAttackers) {\n      enPassantAttackers.forEach(p => {\n        if (p.x === currentPiece.x && p.y === currentPiece.y) {\n          const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, enPassantAttackCoordinates.y, enPassantAttackCoordinates.x, pieces);\n          if (!referee.inCheck(newBoardState, currentPiece.team)) {\n            dotsArr.push({\n              i: enPassantAttackCoordinates.x,\n              j: enPassantAttackCoordinates.y\n            });\n          }\n        }\n      });\n    }\n    if (!referee.inCheck(pieces, \"our\")) {\n      if (currentPiece.type === \"king\") {\n        const req = JSON.stringify({\n          room: room,\n          color: isBlackState == true ? \"black\" : \"white\"\n        });\n        fetch(`http://${IP_ADDRESS}:8080/api/castling`, {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: req\n        }).then(response => response.json()).then(data => {\n          if (isBlackState == false) {\n            console.log(data);\n            console.log('got here');\n            //white\n            //king side \n            const kingSideSquares = [{\n              x: 5,\n              y: 7\n            }, {\n              x: 6,\n              y: 7\n            }];\n            const queenSideSquares = [{\n              x: 1,\n              y: 7\n            }, {\n              x: 2,\n              y: 7\n            }, {\n              x: 3,\n              y: 7\n            }];\n            let occupiedKingSide = false;\n            let occupiedQueenSide = false;\n            kingSideSquares.forEach(square => {\n              if (referee.isTileOccupied(square.x, square.y, pieces)) {\n                occupiedKingSide = true;\n              }\n            });\n            console.log(occupiedKingSide);\n            queenSideSquares.forEach(square => {\n              if (referee.isTileOccupied(square.x, square.y, pieces)) {\n                occupiedQueenSide = true;\n              }\n            });\n            const rooks = [];\n            if (!occupiedKingSide && !areSquaresAttacked(kingSideSquares) && data[\"king\"] === false && data[\"kingRook\"] === false) {\n              console.log('we are eligible to castle king side for white');\n              rooks.push(pieces.find(p => p.x === 7 && p.y === 7));\n            }\n            if (!occupiedQueenSide && !areSquaresAttacked(queenSideSquares) && data[\"king\"] === false && data[\"queenRook\"] === false) {\n              console.log('we are eligible to castle queen side for white');\n              rooks.push(pieces.find(p => p.x === 7 && p.y === 0));\n            }\n            setCastleRooks(rooks);\n          } else {\n            const kingSideSquares = [{\n              x: 1,\n              y: 7\n            }, {\n              x: 2,\n              y: 7\n            }];\n            const queenSideSquares = [{\n              x: 4,\n              y: 7\n            }, {\n              x: 5,\n              y: 7\n            }, {\n              x: 6,\n              y: 7\n            }];\n            let occupiedKingSide = false;\n            let occupiedQueenSide = false;\n            kingSideSquares.forEach(square => {\n              if (referee.isTileOccupied(square.x, square.y, pieces)) {\n                occupiedKingSide = true;\n              }\n            });\n            queenSideSquares.forEach(square => {\n              if (referee.isTileOccupied(square.x, square.y, pieces)) {\n                occupiedQueenSide = true;\n              }\n            });\n            const rooks = [];\n            if (!occupiedKingSide && !areSquaresAttacked(kingSideSquares) && data[\"king\"] === false && data[\"queenRook\"] === false) {\n              console.log('we are eligible to castle king side for black');\n              rooks.push(pieces.find(p => p.x === 7 && p.y === 0));\n            }\n            if (!occupiedQueenSide && !areSquaresAttacked(queenSideSquares) && data[\"king\"] === false && data[\"kingRook\"] === false) {\n              console.log('we are eligible to castle queen side for black');\n              rooks.push(pieces.find(p => p.x === 7 && p.y === 7));\n            }\n            setCastleRooks(rooks);\n          }\n        }).catch(error => console.error('Error:', error));\n      } else {\n        setCastleRooks(null);\n      }\n    }\n    setDots(dotsArr);\n    setActivePiece(currentPiece);\n  }\n  function areSquaresAttacked(squares) {\n    let ret = false;\n    squares.forEach(square => {\n      pieces.forEach(piece => {\n        if (piece.team === \"opponent\") {\n          if (referee.isValidMove(piece.x, piece.y, square.y, square.x, piece.type, piece.team, pieces, false)) {\n            ret = true;\n          }\n        }\n      });\n    });\n    return ret;\n  }\n  function grabPiece(e) {\n    if (!(gameState == \"completed\")) {\n      const chessboard = chessBoardRef.current;\n      const element = e.target;\n      let x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      let y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\n      if (chessboard) {\n        if (!element.classList.contains(\"chess-piece\")) {\n          normalMove(x, y);\n        } else {\n          if (gameState === \"not_started\") {\n            console.log(\"Please let the game begin to make moves\"); // we need to develop UI for this \n          } else {\n            if (turn === \"black\" && isBlackState === true || turn === \"white\" && isBlackState === false) {\n              const a = dots.find(d => d.i === x && d.j === y);\n              if (a) {\n                captureMove(a);\n              } else {\n                if (castleRooks == null) validMovesDisplay(x, y);else {\n                  let castleFlag = false;\n                  console.log(`x=${x}`);\n                  console.log(`y=${y}`);\n                  castleRooks.forEach(castleRook => {\n                    console.log(castleRook);\n                    if (castleRook.x === 7 - x && castleRook.y === 7 - y) {\n                      console.log('we need to castle');\n                      castleFlag = true;\n                      const updatedPieces = [];\n                      if (isBlackState === false) {\n                        let kingS = false;\n                        pieces.forEach(p => {\n                          if (p.x === 7 - x && p.y === 7 - y) {\n                            if (p.y === 7) {\n                              p.y = 5;\n                              kingS = true;\n                            } else if (p.y === 0) {\n                              p.y = 4;\n                            }\n                            updatedPieces.push(p);\n                          } else {\n                            if (!(p.x === 7 && p.y === 4)) {\n                              updatedPieces.push(p);\n                            } else {\n                              kingS === true ? p.y = 6 : p.y = 2;\n                              updatedPieces.push(p);\n                            }\n                          }\n                        });\n                      } else {\n                        let kingS = false;\n                        pieces.forEach(p => {\n                          if (p.x === 7 - x && p.y === 7 - y) {\n                            console.log(p.y);\n                            if (p.y === 7) {\n                              p.y = 4;\n                            } else if (p.y === 0) {\n                              p.y = 2;\n                              kingS = true;\n                            }\n                            updatedPieces.push(p);\n                          } else {\n                            if (!(p.x === 7 && p.y === 3)) {\n                              updatedPieces.push(p);\n                            } else {\n                              kingS === true ? p.y = 1 : p.y = 5;\n                              updatedPieces.push(p);\n                            }\n                          }\n                        });\n                      }\n                      setPieces(updatedPieces);\n                      setDots([]);\n                      socket.emit(\"newMoveToServer\", JSON.stringify({\n                        pieces: updatedPieces,\n                        room: room,\n                        color: isBlackState ? \"black\" : \"white\"\n                      }));\n                      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n                        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n                          socket.emit(\"checkmate\", JSON.stringify({\n                            room: room,\n                            color: isBlackState ? \"black\" : \"white\"\n                          }));\n                        }\n                      } else {\n                        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n                          socket.emit(\"stalemate\", JSON.stringify({\n                            room: room,\n                            color: isBlackState ? \"black\" : \"white\"\n                          }));\n                        }\n                      }\n                      if (turn === \"white\") setTurn(\"black\");else setTurn(\"white\");\n                      setActivePiece(null);\n                      setEnPassant(null);\n                      setEnPassantAttackers(null);\n                      setenPassantAttackCoordinates(null);\n                      setCastleRooks(null);\n                    }\n                  });\n                  if (!castleFlag) {\n                    validMovesDisplay(x, y);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function promotePawn(type) {\n    if (promotionPawn) {\n      const updatedPieces = [];\n      pieces.forEach(piece => {\n        if (promotionPawn === piece) {\n          piece.type = type;\n          piece.image = !isBlackState ? piece.team === \"our\" ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png` : piece.team === \"our\" ? `/assets/images/B_${type}.png` : `/assets/images/W_${type}.png`;\n          piece.x = pawnPromoteCoordinates.x;\n          piece.y = pawnPromoteCoordinates.y;\n          updatedPieces.push(piece);\n        } else {\n          if (!(piece.x === pawnPromoteCoordinates.x && piece.y === pawnPromoteCoordinates.y)) updatedPieces.push(piece);\n        }\n      });\n      setPieces(updatedPieces);\n      setDots([]);\n      socket.emit(\"newMoveToServer\", JSON.stringify({\n        pieces: updatedPieces,\n        room: room,\n        color: isBlackState ? \"black\" : \"white\"\n      }));\n      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n          socket.emit(\"checkmate\", JSON.stringify({\n            room: room,\n            color: isBlackState ? \"black\" : \"white\"\n          }));\n        }\n      } else {\n        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n          socket.emit(\"stalemate\", JSON.stringify({\n            room: room,\n            color: isBlackState ? \"black\" : \"white\"\n          }));\n        }\n      }\n      if (turn === \"white\") setTurn(\"black\");else setTurn(\"white\");\n      setActivePiece(null);\n      setPawnPromoteCoordinates(null);\n      setPromotionPawn(null);\n      setEnPassant(null);\n      setEnPassantAttackers(null);\n      setenPassantAttackCoordinates(null);\n      setCastleRooks(null);\n      pawnPromotionModalRef.current.classList.add('hidden');\n    }\n  }\n  function promotionTeamType() {\n    if (promotionPawn) return !isBlackState ? promotionPawn.team === \"our\" ? \"W\" : \"B\" : promotionPawn.team === \"our\" ? \"B\" : \"W\";\n  }\n  let board = [];\n  for (let i = 0; i < verticalAxis.length; ++i) {\n    for (let j = 0; j < horizontalAxis.length; ++j) {\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) image = p.image;\n      });\n      const dotsfound = dots.find(d => d.i === j && d.j === i);\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        isDotted: dotsfound ? true : false,\n        num: i * i + j,\n        image: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: pawnPromotionModalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"rook\"),\n          src: `/assets/images/${promotionTeamType()}_rook.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"queen\"),\n          src: `/assets/images/${promotionTeamType()}_queen.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"knight\"),\n          src: `/assets/images/${promotionTeamType()}_knight.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"bishop\"),\n          src: `/assets/images/${promotionTeamType()}_bishop.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      /*onMouseMove={e =>  movePiece(e)}*/onPointerDown: e => grabPiece(e) /*onMouseUp={e => dropPiece(e)}*/,\n      id: \"gameboard\",\n      ref: chessBoardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Number of Clients  = \", numClients]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: gameStartButtonRef,\n        onClick: startGameHandler,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 697,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"turnDis\",\n      children: [turn, \"'s  Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\" Result = \", gameResult]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\" \", gameOverDis]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(GameBoard, \"og/rA1PfO8w8ZPz009qTUxh84Is=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Tile","Referee","GRID_SIZE","horizontalAxis","verticalAxis","io","IP_ADDRESS","piece","image","String","x","Number","y","type","team","enPassant","Boolean","initialBoardStateWhite","initialBoardStateBlack","p","teamType","pawns_x_cor","main_piece_x_cor","i","push","SOCKET_URL","socket","GameBoard","room","isBlack","gameState","setGameState","numClients","setNumClients","gameOverDis","setGameOverDis","enPassantAttackers","setEnPassantAttackers","gameResult","setGameResult","isBlackState","setIsBlackState","activePiece","setActivePiece","pieces","setPieces","chessBoardRef","pawnPromotionModalRef","referee","promotionPawn","setPromotionPawn","gameStartButtonRef","turn","setTurn","dots","setDots","enPassantAttackCoordinates","setenPassantAttackCoordinates","color","sessionStorage","getItem","emit","JSON","stringify","setInterval","fetch","method","headers","body","then","response","json","data","catch","error","console","current","classList","contains","add","remove","on","jsondata","parse","res","resDis","setItem","startGameHandler","attackers","filter","Math","abs","setEnPassant","pawnPromoteCoordinates","setPawnPromoteCoordinates","handlePawnPromotion","captureFlag","normalMove","a","find","d","j","updatedPieces","forEach","inCheck","inCheckMate","isStaleMate","setCastleRooks","captureMove","attacker","castleRooks","validMovesDisplay","currentPiece","dotsArr","isValidMove","newBoardState","getBoardStateAfterMove","req","log","kingSideSquares","queenSideSquares","occupiedKingSide","occupiedQueenSide","square","isTileOccupied","rooks","areSquaresAttacked","squares","ret","grabPiece","e","chessboard","element","target","floor","clientX","offsetLeft","clientY","offsetTop","castleFlag","castleRook","kingS","promotePawn","promotionTeamType","board","length","undefined","dotsfound"],"sources":["C:/Users/think/Desktop/git_projects/chess_project/frontend/chess-frontend/src/Components/GameBoard.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport './GameBoard.css'\r\nimport Tile from './Tile';\r\nimport Referee from './Referee';\r\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\r\nimport io from 'socket.io-client';\r\nimport IP_ADDRESS from '../ip_add';\r\n\r\nexport let piece = {\r\n  image: String,\r\n  x: Number,\r\n  y: Number,\r\n  type: String,\r\n  team: String,\r\n  enPassant: Boolean\r\n}\r\n\r\n// array which holds the information regarding initial chess pieces and their \r\nconst initialBoardStateWhite = [];\r\n\r\nconst initialBoardStateBlack = [];\r\n\r\n\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const type = (!false) ? ((p === 0) ? \"B\" : \"W\") : ((p === 0) ? \"W\" : \"B\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateWhite.push({ image: `assets/images/${type}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_king.png`, x: main_piece_x_cor, y: 4, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_queen.png`, x: main_piece_x_cor, y: 3, type: \"queen\", team: teamType });\r\n}\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const type = (!true) ? ((p === 0) ? \"B\" : \"W\") : ((p === 0) ? \"W\" : \"B\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateBlack.push({ image: `assets/images/${type}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_king.png`, x: main_piece_x_cor, y: 3, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_queen.png`, x: main_piece_x_cor, y: 4, type: \"queen\", team: teamType });\r\n}\r\n\r\n//the url where the web socket server is listening for connections\r\nconst SOCKET_URL = `ws://${IP_ADDRESS}:8085/`;\r\n\r\n// global socket object to use for communication with the server\r\nconst socket = io(SOCKET_URL);\r\n\r\n\r\nexport default function GameBoard({ room, isBlack }) {\r\n  // this is a state variable that is used to determine the state of the game ,\r\n  // we need to fetch this from the backend on component mount, but the fetching should be performed after 1 second  \r\n  const [gameState, setGameState] = useState(\"not_started\");\r\n\r\n  // state variable to hold the number of clients joined at any given point of time\r\n  const [numClients, setNumClients] = useState(0);\r\n\r\n  const [gameOverDis,setGameOverDis] = useState(null);\r\n\r\n  const [enPassantAttackers, setEnPassantAttackers] = useState(null);\r\n\r\n  const [gameResult,setGameResult] = useState(null);\r\n\r\n  // state variable to determine if the state is white or black\r\n  const [isBlackState, setIsBlackState] = useState(false);\r\n\r\n\r\n  const [activePiece, setActivePiece] = useState(null);\r\n  // const [gridX, setGridX] = useState(0);\r\n  // const [gridY, setGridY] = useState(0);\r\n  // const [pieces, setPieces] = useState(isBlack ? initialBoardStateBlack : initialBoardStateWhite);\r\n  const [pieces, setPieces] = useState(initialBoardStateWhite);\r\n  const chessBoardRef = useRef(null);\r\n  const pawnPromotionModalRef = useRef(null);\r\n  const referee = new Referee();\r\n  const [promotionPawn, setPromotionPawn] = useState(null);\r\n  const gameStartButtonRef = useRef(null);\r\n  const [turn, setTurn] = useState(null);\r\n  const [dots, setDots] = useState([]);\r\n  const [enPassantAttackCoordinates,setenPassantAttackCoordinates] = useState(null);\r\n\r\n  // JOIN THE ROOM ON COMPONENT MOUNT + LEAVE THE ROOM ON Component Unmount\r\n  useEffect(() => {\r\n    let color = \"white\";\r\n    if (sessionStorage.getItem(room) != null) {\r\n      color = sessionStorage.getItem(room);\r\n      color === \"white\" ? setIsBlackState(false) : setIsBlackState(true);\r\n    }\r\n    socket.emit('joinRoomEvent', JSON.stringify({ 'room': `${room}`, 'color': `${color}` }));\r\n    return () => {\r\n      socket.emit('leaveRoomEvent', room);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      fetch(`http://${IP_ADDRESS}:8080/api/num_clients`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: room\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          setNumClients(data[\"num_clients\"]);\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }, 1000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (gameStartButtonRef) {\r\n      if (numClients != 2 || gameState != 'not_started') {\r\n        if (!gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.add('two_clients');\r\n      }\r\n      else {\r\n        if (gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.remove('two_clients');\r\n      }\r\n    }\r\n  }, [numClients, gameState]);\r\n\r\n  useEffect(() => {\r\n    if (gameState == \"completed\") {\r\n      setGameOverDis(\"GAME IS OVER !!! PLEASE START NEW GAME !! \")\r\n    }\r\n  }, [gameState]);\r\n\r\n  socket.on(\"pieceInfo\", (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    setPieces(jsondata[\"pieces\"]);\r\n    setGameState(jsondata[\"game_state\"]);\r\n    if(jsondata[\"turn\"] != \"NA\")\r\n    setTurn(jsondata[\"turn\"])\r\n  });\r\n\r\n  socket.on(\"newMoveUpdateServerToClient\", (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    setPieces(jsondata[\"pieces\"]);\r\n    if(turn === \"white\")\r\n    setTurn(\"black\");\r\n    else\r\n    setTurn(\"white\")\r\n  });\r\n\r\n  socket.on(\"gameEndEvent\", (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    const res = jsondata[\"result\"];\r\n    const resDis = (res === \"white\") ? \"WHITE WON\" : ((res === \"black\") ? \"BLACK WON\" : \"STALEMATE\");\r\n    setGameResult(resDis);\r\n    setGameState(\"completed\");\r\n    //result will be (\"black\" / \"white\" / \"\")  --- FE TBD\r\n  });\r\n\r\n  socket.on(\"colorMsg\", (data) => {\r\n    (data === \"white\") ? setIsBlackState(false) : setIsBlackState(true);\r\n    (data === \"white\") ? setPieces(initialBoardStateWhite) : setPieces(initialBoardStateBlack);\r\n    setGameState(\"started\");\r\n    setTurn(\"white\");\r\n    sessionStorage.setItem(room, data);\r\n  });\r\n\r\n  function startGameHandler() {\r\n    socket.emit('startGameEvent', room);\r\n  }\r\n\r\n  socket.on('enPassant', (data) => {\r\n    const jsondata = JSON.parse(data);\r\n    const x = jsondata[\"x\"];\r\n    const y = jsondata[\"y\"];\r\n    const attackers = pieces.filter(p=> (p.x === y) && (p.type === \"pawn\") && (p.team === \"our\") && Math.abs(p.y-x) === 1);\r\n    setEnPassantAttackers(attackers);\r\n    setEnPassant(true);\r\n    setenPassantAttackCoordinates({x:x,y:y});\r\n  })\r\n\r\n  const [pawnPromoteCoordinates,setPawnPromoteCoordinates] = useState(null);\r\n  const [enPassant,setEnPassant] = useState(null);\r\n\r\n  function handlePawnPromotion(activePiece,x,y,captureFlag)\r\n  {\r\n    setPromotionPawn(activePiece);\r\n    setPawnPromoteCoordinates({x:y,y:x});\r\n    pawnPromotionModalRef.current.classList.remove('hidden');\r\n  }\r\n\r\n  function normalMove(x, y) {\r\n    const a = dots.find((d) => d.i === x && d.j === y);\r\n    if (a) {\r\n      if(activePiece && activePiece.type === \"pawn\" && (y=== 0 || y=== 7))\r\n      {\r\n        handlePawnPromotion(activePiece,x,y,false);\r\n      }\r\n      else\r\n      {\r\n        if(activePiece.type === \"pawn\" && Math.abs(activePiece.x-y) === 2)\r\n        {\r\n          socket.emit(\"eligibleForEnPassant\",JSON.stringify({room:room,x:x,y:y}));\r\n        }\r\n        const updatedPieces = [];\r\n        pieces.forEach((p) => {\r\n          if (p === activePiece) {\r\n            if(p.type === \"king\")\r\n            {\r\n              socket.emit('kingMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n            }\r\n            else if(p.type === \"rook\" && p.x === 7 && p.y === 7)\r\n            {\r\n              socket.emit('kingRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n            }\r\n            else if(p.type === \"rook\" && p.x === 7 && p.y === 0)\r\n            {\r\n              socket.emit('queenRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n            }\r\n            p.x = y;\r\n            p.y = x;\r\n            updatedPieces.push(p);\r\n          }\r\n          else {\r\n            updatedPieces.push(p);\r\n          }\r\n        });\r\n        setPieces(updatedPieces);\r\n        setDots([]);\r\n        socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n            socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n          }\r\n        }\r\n        else {\r\n          if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n            socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n          }\r\n        }\r\n        if(turn === \"white\")\r\n        setTurn(\"black\");\r\n        else\r\n        setTurn(\"white\")\r\n        setActivePiece(null);\r\n        setEnPassant(null);\r\n        setEnPassantAttackers(null);\r\n        setenPassantAttackCoordinates(null);\r\n        setCastleRooks(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  function captureMove(a) {\r\n    if(activePiece && activePiece.type === \"pawn\" && (a.j=== 0 || a.j=== 7))\r\n    {\r\n      handlePawnPromotion(activePiece,a.i,a.j,true);\r\n    }\r\n    else\r\n    {\r\n      const updatedPieces = [];\r\n      pieces.forEach((p) => {\r\n        if (p === activePiece) {\r\n          if(p.type === \"king\")\r\n          {\r\n            socket.emit('kingMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n          }\r\n          else if(p.type === \"rook\" && p.x === 7 && p.y === 7)\r\n          {\r\n            socket.emit('kingRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n          }\r\n          else if(p.type === \"rook\" && p.x === 7 && p.y === 0)\r\n          {\r\n            socket.emit('queenRookMove',JSON.stringify({ 'room': `${room}`, 'color': `${(isBlackState == true)?\"black\":\"white\"}`}));\r\n          }\r\n          if(enPassantAttackers)\r\n          {\r\n            enPassantAttackers.forEach((attacker)=>{\r\n              if(attacker.x === p.x && attacker.y === p.y && enPassantAttackCoordinates.y === a.j && enPassantAttackCoordinates.x === a.i)\r\n              {\r\n                p.x = enPassantAttackCoordinates.y -1;\r\n                p.y = enPassantAttackCoordinates.x;\r\n              }\r\n            })\r\n          }\r\n          else\r\n          {\r\n            p.x = a.j;\r\n            p.y = a.i;\r\n          }\r\n          updatedPieces.push(p);\r\n        }\r\n        else {\r\n          if (!(p.x === a.j && p.y === a.i)) {\r\n            updatedPieces.push(p);\r\n          }\r\n        }\r\n      });\r\n      setPieces(updatedPieces);\r\n      setDots([]);\r\n      socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      else {\r\n        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      if(turn === \"white\")\r\n      setTurn(\"black\");\r\n      else\r\n      setTurn(\"white\")\r\n      setActivePiece(null);\r\n      setEnPassant(null);\r\n      setEnPassantAttackers(null);\r\n      setenPassantAttackCoordinates(null);\r\n      setCastleRooks(null);\r\n    }\r\n  }\r\n\r\nconst [castleRooks,setCastleRooks] = useState(null);\r\n\r\n  function validMovesDisplay(x, y) {\r\n    const currentPiece = pieces.find(p => p.y === x && p.x === y);\r\n    const dotsArr = [];\r\n    for (let i = 0; i <= 7; ++i) {\r\n      for (let j = 0; j <= 7; j++) {\r\n        const a = referee.isValidMove(y, x, j, i, currentPiece.type, currentPiece.team, pieces, true);\r\n        if (a) {\r\n          const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, i, j, pieces);\r\n          if (!referee.inCheck(newBoardState, currentPiece.team)) {\r\n            dotsArr.push({ i: i, j: j });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (enPassantAttackers) {\r\n      enPassantAttackers.forEach((p) => {\r\n        if (p.x === currentPiece.x && p.y === currentPiece.y) {\r\n          const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y,  enPassantAttackCoordinates.y, enPassantAttackCoordinates.x, pieces);\r\n          if (!referee.inCheck(newBoardState, currentPiece.team)) {\r\n            dotsArr.push({ i: enPassantAttackCoordinates.x, j: enPassantAttackCoordinates.y });\r\n          }\r\n        }\r\n      })\r\n    }\r\n    if(!referee.inCheck(pieces,\"our\"))\r\n    {\r\n      if(currentPiece.type === \"king\")\r\n      {\r\n        const req = JSON.stringify({room:room,color:(isBlackState == true?\"black\":\"white\")});\r\n        fetch(`http://${IP_ADDRESS}:8080/api/castling`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n          body: req\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            if(isBlackState == false)\r\n            {\r\n              console.log(data)\r\n              console.log('got here')\r\n                //white\r\n                //king side \r\n                const kingSideSquares = [{x:5,y:7},{x:6,y:7}];\r\n                const queenSideSquares = [{x:1,y:7},{x:2,y:7},{x:3,y:7}];\r\n                let occupiedKingSide = false;\r\n                let  occupiedQueenSide = false;\r\n                kingSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedKingSide = true;\r\n                  }\r\n                })\r\n                console.log(occupiedKingSide)\r\n                queenSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedQueenSide = true;\r\n                  }\r\n                })\r\n                const rooks = []\r\n                if(!occupiedKingSide && !areSquaresAttacked(kingSideSquares) && data[\"king\"] === false && data[\"kingRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle king side for white');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 7))\r\n                }\r\n                if(!occupiedQueenSide && !areSquaresAttacked(queenSideSquares) && data[\"king\"] === false && data[\"queenRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle queen side for white');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 0))\r\n                }\r\n                setCastleRooks(rooks);\r\n  \r\n            }\r\n            else\r\n            {\r\n     \r\n                const kingSideSquares = [{x:1,y:7},{x:2,y:7}];\r\n                const queenSideSquares = [{x:4,y:7},{x:5,y:7},{x:6,y:7}];\r\n                let occupiedKingSide = false;\r\n                let  occupiedQueenSide = false;\r\n                kingSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedKingSide = true;\r\n                  }\r\n                })\r\n                queenSideSquares.forEach((square)=>{\r\n                  if(referee.isTileOccupied(square.x,square.y,pieces))\r\n                  {\r\n                    occupiedQueenSide = true;\r\n                  }\r\n                })\r\n                const rooks = []\r\n                if(!occupiedKingSide && !areSquaresAttacked(kingSideSquares) && data[\"king\"] === false && data[\"queenRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle king side for black');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 0))\r\n\r\n                }\r\n                if(!occupiedQueenSide && !areSquaresAttacked(queenSideSquares) && data[\"king\"] === false && data[\"kingRook\"] === false)\r\n                {\r\n                  console.log('we are eligible to castle queen side for black');\r\n                  rooks.push(pieces.find(p => p.x === 7 && p.y === 7))\r\n\r\n                }\r\n                setCastleRooks(rooks);\r\n            }\r\n          })\r\n          .catch(error => console.error('Error:', error));\r\n      }\r\n      else\r\n      {\r\n        setCastleRooks(null);\r\n      }\r\n    }\r\n    setDots(dotsArr);\r\n    setActivePiece(currentPiece);\r\n  }\r\n\r\n  function areSquaresAttacked(squares)\r\n  {\r\n    let ret = false;\r\n    squares.forEach((square) => {\r\n      pieces.forEach((piece) => {\r\n        if (piece.team === \"opponent\") {\r\n          if (referee.isValidMove(piece.x, piece.y, square.y , square.x, piece.type, piece.team, pieces, false)) {\r\n            ret = true;\r\n          }\r\n        }\r\n      })\r\n    })\r\n    return ret;\r\n  }\r\n\r\n  function grabPiece(e) {\r\n    if (!(gameState == \"completed\")) {\r\n      const chessboard = chessBoardRef.current;\r\n      const element = (e.target);\r\n      let x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\r\n      let y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\r\n      if (chessboard) {\r\n        if (!element.classList.contains(\"chess-piece\")) {\r\n          normalMove(x, y)\r\n        }\r\n        else {\r\n          if (gameState === \"not_started\") {\r\n            console.log(\"Please let the game begin to make moves\"); // we need to develop UI for this \r\n          }\r\n          else {\r\n            if ((turn === \"black\" && isBlackState === true) || (turn === \"white\" && isBlackState === false)) {\r\n              const a = dots.find((d) => d.i === x && d.j === y);\r\n              if (a) {\r\n                captureMove(a)\r\n              }\r\n              else {\r\n                if(castleRooks == null)\r\n                validMovesDisplay(x, y);\r\n                else\r\n                {\r\n                  let castleFlag = false;\r\n                  console.log(`x=${x}`);\r\n                  console.log(`y=${y}`);\r\n                  castleRooks.forEach((castleRook)=>{\r\n                    console.log(castleRook)\r\n                    if(castleRook.x === 7-x && castleRook.y === 7-y)\r\n                    {\r\n                      console.log('we need to castle')\r\n                      castleFlag = true;\r\n                      const updatedPieces=[];\r\n                      if(isBlackState === false)\r\n                      {\r\n                        let kingS = false;\r\n                        pieces.forEach((p)=>{\r\n                          if(p.x === 7-x && p.y === 7-y)\r\n                          {\r\n                            if(p.y === 7)\r\n                            {\r\n                              p.y = 5;\r\n                              kingS = true;\r\n                            }\r\n                            else if(p.y === 0)\r\n                            {\r\n                              p.y = 4;\r\n                            }\r\n                            updatedPieces.push(p);\r\n                          }\r\n                          else\r\n                          {\r\n                            if (!(p.x === 7 && p.y === 4)) {\r\n                              updatedPieces.push(p);\r\n                            }\r\n                            else\r\n                            {\r\n                              (kingS === true) ? p.y = 6 : p.y = 2;\r\n                              updatedPieces.push(p);\r\n                            }\r\n                          }\r\n                        })\r\n                      }\r\n                      else\r\n                      {\r\n                        let kingS = false;\r\n                        pieces.forEach((p)=>{\r\n                          if(p.x === 7-x && p.y === 7-y)\r\n                          {\r\n                            console.log(p.y)\r\n                            if(p.y === 7)\r\n                            {\r\n                              p.y = 4;\r\n                              \r\n                            }\r\n                            else if(p.y === 0)\r\n                            {\r\n                              p.y = 2;\r\n                              kingS = true;\r\n                            }\r\n                            updatedPieces.push(p);\r\n                          }\r\n                          else\r\n                          {\r\n                            if (!(p.x === 7 && p.y === 3)) {\r\n                              updatedPieces.push(p);\r\n                            }\r\n                            else\r\n                            {\r\n                              (kingS === true) ? p.y = 1 : p.y = 5;\r\n                              updatedPieces.push(p);\r\n                            }\r\n                          }\r\n                        })\r\n                      }\r\n                      setPieces(updatedPieces);\r\n                      setDots([]);\r\n                      socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n                      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n                        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n                          socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n                        }\r\n                      }\r\n                      else {\r\n                        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n                          socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n                        }\r\n                      }\r\n                      if(turn === \"white\")\r\n                      setTurn(\"black\");\r\n                      else\r\n                      setTurn(\"white\");\r\n                      setActivePiece(null);\r\n                      setEnPassant(null);\r\n                      setEnPassantAttackers(null);\r\n                      setenPassantAttackCoordinates(null);\r\n                      setCastleRooks(null);\r\n                    }\r\n                  });\r\n                  if(!castleFlag)\r\n                  {\r\n                    validMovesDisplay(x,y);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n   function  promotePawn(type) {\r\n    if (promotionPawn) {\r\n      const updatedPieces = [];\r\n      pieces.forEach((piece) => {\r\n        if (promotionPawn === piece) {\r\n          piece.type = type;\r\n          piece.image = (!isBlackState) ? ((piece.team === \"our\") ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png`) : ((piece.team === \"our\") ? `/assets/images/B_${type}.png` : `/assets/images/W_${type}.png`);\r\n          piece.x = pawnPromoteCoordinates.x;\r\n          piece.y = pawnPromoteCoordinates.y;\r\n          updatedPieces.push(piece);\r\n        }\r\n        else\r\n        {\r\n          if(!(piece.x === pawnPromoteCoordinates.x && piece.y === pawnPromoteCoordinates.y))\r\n          updatedPieces.push(piece);\r\n        }\r\n      });\r\n      setPieces(updatedPieces);\r\n      setDots([]);\r\n      socket.emit(\"newMoveToServer\", JSON.stringify({ pieces: updatedPieces, room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n      if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n        if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"checkmate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      else {\r\n        if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n          socket.emit(\"stalemate\", JSON.stringify({ room: room, color: isBlackState ? \"black\" : \"white\" }));\r\n        }\r\n      }\r\n      if(turn === \"white\")\r\n      setTurn(\"black\");\r\n      else\r\n      setTurn(\"white\");\r\n      setActivePiece(null);\r\n      setPawnPromoteCoordinates(null);\r\n      setPromotionPawn(null);\r\n      setEnPassant(null);\r\n      setEnPassantAttackers(null);\r\n      setenPassantAttackCoordinates(null);\r\n      setCastleRooks(null);\r\n      pawnPromotionModalRef.current.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  function promotionTeamType() {\r\n    if (promotionPawn)\r\n      return (!isBlackState) ? (promotionPawn.team === \"our\" ? \"W\" : \"B\") : (promotionPawn.team === \"our\" ? \"B\" : \"W\");\r\n  }\r\n\r\n\r\n  let board = [];\r\n  for (let i = 0; i < verticalAxis.length; ++i) {\r\n    for (let j = 0; j < horizontalAxis.length; ++j) {\r\n      let image = undefined;\r\n      pieces.forEach(p => { if (p.x === i && p.y === j) image = p.image });\r\n      const dotsfound = dots.find((d) => d.i === j && d.j === i)\r\n      board.push(<Tile isDotted={dotsfound ? true : false} num={i * i + j} image={image} />);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div id=\"pawn-promotion-modal\" className='hidden' ref={pawnPromotionModalRef}>\r\n        <div className='modal-body' >\r\n          <img onClick={ () => promotePawn(\"rook\")} src={`/assets/images/${promotionTeamType()}_rook.png`} />\r\n          <img onClick={ () => promotePawn(\"queen\")} src={`/assets/images/${promotionTeamType()}_queen.png`} />\r\n          <img onClick={ () => promotePawn(\"knight\")} src={`/assets/images/${promotionTeamType()}_knight.png`} />\r\n          <img onClick={ () => promotePawn(\"bishop\")} src={`/assets/images/${promotionTeamType()}_bishop.png`} />\r\n        </div>\r\n      </div>\r\n      <div /*onMouseMove={e =>  movePiece(e)}*/ onPointerDown={e => grabPiece(e)} /*onMouseUp={e => dropPiece(e)}*/ id=\"gameboard\" ref={chessBoardRef}>\r\n        {board}\r\n      </div>\r\n      <div> <b>Number of Clients  = {numClients}</b></div>\r\n      <div>\r\n        <button ref={gameStartButtonRef} onClick={startGameHandler}>Start Game</button>\r\n      </div>\r\n      <div className='turnDis' >\r\n        {turn}'s  Turn\r\n      </div>\r\n      <div>\r\n        <b> Result = {gameResult}</b>\r\n      </div>\r\n      <div>\r\n        <b> {gameOverDis}</b>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}