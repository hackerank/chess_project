{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\think\\\\Desktop\\\\Projects\\\\Chess Project\\\\frontend\\\\chess-frontend\\\\src\\\\Components\\\\GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './GameBoard.css';\nimport Tile from './Tile';\nimport Referee from './Referee';\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let piece = {\n  image: String,\n  x: Number,\n  y: Number,\n  type: String,\n  team: String,\n  enPassant: Boolean\n};\n\n// array which holds the information regarding initial chess pieces and their \nconst initialBoardStateWhite = [];\nconst initialBoardStateBlack = [];\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? \"opponent\" : \"our\";\n  const type = !false ? p === 0 ? \"B\" : \"W\" : p === 0 ? \"W\" : \"B\";\n  const pawns_x_cor = p === 0 ? 1 : 6;\n  const main_piece_x_cor = p === 0 ? 0 : 7;\n  //pawns\n  for (let i = 0; i < 8; ++i) {\n    initialBoardStateWhite.push({\n      image: `assets/images/${type}_pawn.png`,\n      x: pawns_x_cor,\n      y: i,\n      type: \"pawn\",\n      team: teamType\n    });\n  }\n  //rooks\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 0,\n    type: \"rook\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 7,\n    type: \"rook\",\n    team: teamType\n  });\n  //knights\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 1,\n    type: \"knight\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 6,\n    type: \"knight\",\n    team: teamType\n  });\n  //bishops\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 2,\n    type: \"bishop\",\n    team: teamType\n  });\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 5,\n    type: \"bishop\",\n    team: teamType\n  });\n  //kings\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_king.png`,\n    x: main_piece_x_cor,\n    y: 4,\n    type: \"king\",\n    team: teamType\n  });\n  //queens\n  initialBoardStateWhite.push({\n    image: `assets/images/${type}_queen.png`,\n    x: main_piece_x_cor,\n    y: 3,\n    type: \"queen\",\n    team: teamType\n  });\n}\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? \"opponent\" : \"our\";\n  const type = !true ? p === 0 ? \"B\" : \"W\" : p === 0 ? \"W\" : \"B\";\n  const pawns_x_cor = p === 0 ? 1 : 6;\n  const main_piece_x_cor = p === 0 ? 0 : 7;\n  //pawns\n  for (let i = 0; i < 8; ++i) {\n    initialBoardStateBlack.push({\n      image: `assets/images/${type}_pawn.png`,\n      x: pawns_x_cor,\n      y: i,\n      type: \"pawn\",\n      team: teamType\n    });\n  }\n  //rooks\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 0,\n    type: \"rook\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 7,\n    type: \"rook\",\n    team: teamType\n  });\n  //knights\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 1,\n    type: \"knight\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 6,\n    type: \"knight\",\n    team: teamType\n  });\n  //bishops\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 2,\n    type: \"bishop\",\n    team: teamType\n  });\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 5,\n    type: \"bishop\",\n    team: teamType\n  });\n  //kings\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_king.png`,\n    x: main_piece_x_cor,\n    y: 4,\n    type: \"king\",\n    team: teamType\n  });\n  //queens\n  initialBoardStateBlack.push({\n    image: `assets/images/${type}_queen.png`,\n    x: main_piece_x_cor,\n    y: 3,\n    type: \"queen\",\n    team: teamType\n  });\n}\n\n//the url where the web socket server is listening for connections\nconst SOCKET_URL = `ws://192.168.29.13:8085/`;\n\n// global socket object to use for communication with the server\nconst socket = io(SOCKET_URL);\nexport default function GameBoard(_ref) {\n  _s();\n  let {\n    room,\n    isBlack\n  } = _ref;\n  // this is a state variable that is used to determine the state of the game ,\n  // we need to fetch this from the backend on component mount, but the fetching should be performed after 1 second  \n  const [gameState, setGameState] = useState(\"not_started\");\n\n  // state variable to hold the number of clients joined at any given point of time\n  const [numClients, setNumClients] = useState(0);\n\n  // state variable to determine if the state is white or black\n  const [isBlackState, setIsBlackState] = useState(false);\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  // const [pieces, setPieces] = useState(isBlack ? initialBoardStateBlack : initialBoardStateWhite);\n  const [pieces, setPieces] = useState(initialBoardStateWhite);\n  const chessBoardRef = useRef(null);\n  const pawnPromotionModalRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState(null);\n  const gameStartButtonRef = useRef(null);\n  const [turn, setTurn] = useState(null);\n  const [dots, setDots] = useState([]);\n\n  // JOIN THE ROOM ON COMPONENT MOUNT + LEAVE THE ROOM ON Component Unmount\n  useEffect(() => {\n    let color = \"white\";\n    if (sessionStorage.getItem(room) != null) {\n      color = sessionStorage.getItem(room);\n      color === \"white\" ? setIsBlackState(false) : setIsBlackState(true);\n    }\n    socket.emit('joinRoomEvent', JSON.stringify({\n      'room': `${room}`,\n      'color': `${color}`\n    }));\n    return () => {\n      socket.emit('leaveRoomEvent', room);\n    };\n  }, []);\n  useEffect(() => {\n    setInterval(() => {\n      fetch('http://192.168.29.13:8080/api/num_clients', {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: room\n      }).then(response => response.json()).then(data => {\n        setNumClients(data[\"num_clients\"]);\n      }).catch(error => console.error('Error:', error));\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    if (gameStartButtonRef) {\n      if (numClients != 2 || gameState != 'not_started') {\n        if (!gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.add('two_clients');\n      } else {\n        if (gameStartButtonRef.current.classList.contains('two_clients')) gameStartButtonRef.current.classList.remove('two_clients');\n      }\n    }\n  }, [numClients, gameState]);\n\n  // socket.on(\"pieceInfo\", (data) => {\n  //   const jsondata = JSON.parse(data);\n  //   setPieces(jsondata[\"pieces\"]);\n  //   setGameState(jsondata[\"game_state\"]);\n\n  // });\n\n  //  socket.on(\"pieceMovementServerToClient\", async (data) => {\n  //   const jsondata = JSON.parse(data);\n  //   setPieces(jsondata[\"pieces\"]);\n  // });\n\n  // socket.on(\"youAreWhite\", () => {\n  //   setIsBlackState(false);\n  //   setPieces(initialBoardStateWhite);\n  //   setGameState(\"started\");\n  //   sessionStorage.setItem(room, \"white\");\n  // });\n\n  // socket.on(\"youAreBlack\", () => {\n  //   setIsBlackState(true);\n  //   setPieces(initialBoardStateBlack);\n  //   setGameState(\"started\");\n  //   sessionStorage.setItem(room, \"black\");\n  // });\n\n  function startGameHandler() {\n    socket.emit('startGameEvent', room);\n    setTurn(\"WHITE\");\n  }\n  function randomTestFunc() {\n    const piece = pieces.find(p => p.y === 1 && p.x === 7);\n    console.log(piece);\n    const bs = referee.getBoardStateAfterMove(7, 1, 0, 5, pieces);\n    setPieces(bs);\n    console.log(referee.inCheck(bs, piece.team, \"\", \"\"));\n  }\n  function grabPiece(e) {\n    const chessboard = chessBoardRef.current;\n    const element = e.target;\n    if (chessboard) {\n      if (!element.classList.contains(\"chess-piece\")) {\n        const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n        const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\n        const a = dots.find(d => d.i === x && d.j === y);\n        if (a) {\n          //here we make a normal move\n          const updatedPieces = [];\n          pieces.forEach(p => {\n            if (p === activePiece) {\n              p.x = y;\n              p.y = x;\n              if ((0 === p.x || 7 === p.x) && p.type === \"pawn\") {\n                setPromotionPawn(p);\n                pawnPromotionModalRef.current.classList.remove('hidden');\n              }\n              if (Math.abs(p.x - y) === 2 && p.type === \"pawn\") {\n                p.enPassant = true;\n              } else {\n                p.enPassant = true;\n              }\n              updatedPieces.push(p);\n            } else {\n              if (p.type === \"pawn\") {\n                p.enPassant = false;\n              }\n              updatedPieces.push(p);\n            }\n          });\n          setPieces(updatedPieces);\n          setDots([]);\n          if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n            console.log(\"In Check\");\n            if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n              console.log(\"In CheckMate\");\n            } else {\n              console.log(\" NOT In CheckMate\");\n            }\n          } else {\n            if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n              console.log(\"In StaleMate\");\n            } else {\n              console.log(\" NOT In StaleMate\");\n            }\n          }\n          console.log(\"Move Complete\");\n          setActivePiece(null);\n          //now the move is made\n        }\n      } else {\n        const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n        const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\n        const a = dots.find(d => d.i === x && d.j === y);\n        if (a) {\n          //here we make a capture move\n          const updatedPieces = [];\n          pieces.forEach(p => {\n            if (p === activePiece) {\n              p.x = a.j;\n              p.y = a.i;\n              if (p.type === \"pawn\") {\n                p.enPassant = false;\n              }\n              if ((0 === p.x || 7 === p.x) && p.type === \"pawn\") {\n                setPromotionPawn(p);\n                pawnPromotionModalRef.current.classList.remove('hidden');\n              }\n              updatedPieces.push(p);\n            } else {\n              if (!(p.x === a.j && p.y === a.i)) {\n                if (p.type === \"pawn\") {\n                  p.enPassant = false;\n                }\n                updatedPieces.push(p);\n              }\n            }\n          });\n          setPieces(updatedPieces);\n          setDots([]);\n          if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n            console.log(\"In Check\");\n            if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n              console.log(\"In CheckMate\");\n            } else {\n              console.log(\" NOT In CheckMate\");\n            }\n          } else {\n            if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\n              console.log(\"In StaleMate\");\n            } else {\n              console.log(\" NOT In StaleMate\");\n            }\n          }\n          setActivePiece(null);\n          // now the move is made\n        } else {\n          const currentPiece = pieces.find(p => p.y === x && p.x === y);\n          const dotsArr = [];\n          for (let i = 0; i <= 7; ++i) {\n            for (let j = 0; j <= 7; j++) {\n              const a = referee.isValidMove(y, x, j, i, currentPiece.type, currentPiece.team, pieces, false);\n              const b = referee.isEnPassantMove(y, x, j, i, currentPiece.type, currentPiece.team, pieces);\n              if (b) {\n                const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, i, j, pieces);\n                if (!referee.inCheck(newBoardState, currentPiece.team)) {\n                  dotsArr.push({\n                    i: i,\n                    j: j\n                  });\n                }\n              }\n              if (a) {\n                const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, i, j, pieces);\n                if (!referee.inCheck(newBoardState, currentPiece.team)) {\n                  dotsArr.push({\n                    i: i,\n                    j: j\n                  });\n                }\n              }\n            }\n          }\n          setDots(dotsArr);\n          setActivePiece(currentPiece);\n        }\n      }\n    }\n  }\n\n  // function movePiece(e) {\n  //   const chessboard = chessBoardRef.current;\n  //   if (activePiece && chessboard) {\n  //     const minX = chessboard.offsetLeft;\n  //     const minY = chessboard.offsetTop;\n  //     const maxX = chessboard.offsetLeft + chessboard.clientWidth;\n  //     const maxY = chessboard.offsetTop + chessboard.clientHeight;\n  //     const x = e.clientX;\n  //     const y = e.clientY;\n  //     activePiece.style.position = \"absolute\";\n\n  //     // if (x < minX) {\n  //     //   activePiece.style.left = `${minX - GRID_SIZE / 2}px`;\n  //     // }\n  //     // else if (x > maxX) {\n  //     //   activePiece.style.left = `${maxX - GRID_SIZE / 2}px`;\n  //     // }\n  //     // else activePiece.style.left = `${x - GRID_SIZE / 2}px`;\n\n  //     // if (y < minY) {\n  //     //   activePiece.style.top = `${minY - GRID_SIZE / 2}px`;\n  //     // }\n  //     // else if (y > maxY) {\n  //     //   activePiece.style.top = `${maxY - GRID_SIZE / 2}px`;\n\n  //     // }\n  //     // else activePiece.style.top = `${y - GRID_SIZE / 2}px`;\n\n  //     activePiece.style.left = `${x - GRID_SIZE / 2}px`;\n  //     activePiece.style.top = `${y - GRID_SIZE / 2}px`\n  //   }\n  // }\n\n  setInterval(() => {\n    fetch('http://192.168.29.13:8080/api/turn', {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: room\n    }).then(response => response.json()).then(data => {\n      setTurn(data[\"turn\"]);\n    }).catch(error => console.error('Error:', error));\n  }, 1000);\n\n  // async function dropPiece(e) {\n  //   const chessboard = chessBoardRef.current;\n  //   if (activePiece && chessboard) {\n  //     const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n  //     const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\n  //     if(!(x>=0 && x<7 && y>=0 &&y<8))\n  //     {\n  //       activePiece.style.position = \"relative\";\n  //       activePiece.style.removeProperty('top');\n  //       activePiece.style.removeProperty('left');\n  //     }\n  //     else\n  //     {\n  //       const currentPiece = pieces.find(p => p.y === gridX && p.x === gridY);\n  //       if (currentPiece) {\n  //         const validMove = await referee.isValidMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces,room,isBlackState?\"black\":\"white\");\n  //         const isEnPassantMove = referee.isEnPassantMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\n  //         const pawnDirection = \"our\" === currentPiece.team ? 1 : -1;\n  //         if (isEnPassantMove) {\n  //           const updatedPieces = pieces.reduce((results, piece) => {\n  //             if (currentPiece === piece) {\n  //               piece.enPassant = false;\n  //               piece.x = y;\n  //               piece.y = x;\n  //               results.push(piece);\n  //             }\n  //             else if (!(piece.x === y + pawnDirection && piece.y === x)) {\n  //               if (\"pawn\" === piece.type)\n  //                 piece.enPassant = false;\n  //               results.push(piece);\n  //             }\n  //             return results;\n  //           }, []);\n  //           setPieces(updatedPieces);\n  //           if (gameState == \"started\")\n  //             socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\n  //         }\n  //         else {\n  //           if (validMove) {\n  //             if (\"pawn\" === currentPiece.type) {\n  //               const updatedPieces = pieces.reduce((results, piece) => {\n  //                 if (currentPiece === piece) {\n  //                   if (piece.type === \"pawn\" && Math.abs(y - gridY) === 2) {\n  //                     piece.enPassant = true;\n  //                   }\n  //                   else {\n  //                     piece.enPassant = false;\n  //                   }\n  //                   piece.x = y;\n  //                   piece.y = x;\n  //                   if (0 === piece.x || 7 === piece.x) {\n  //                     setPromotionPawn(currentPiece);\n  //                     pawnPromotionModalRef.current.classList.remove('hidden');\n  //                   }\n  //                   results.push(piece);\n  //                 }\n  //                 else if (!(piece.x === y && piece.y === x)) {\n  //                   if (\"pawn\" === piece.type)\n  //                     piece.enPassant = false;\n  //                   results.push(piece);\n  //                 }\n  //                 return results;\n  //               }, []);\n  //               setPieces(updatedPieces);\n  //               if (gameState == \"started\")\n  //                 socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\n  //             }\n  //             else if (\"knight\" === currentPiece.type || \"bishop\" === currentPiece.type || \"rook\" === currentPiece.type || \"queen\" === currentPiece.type || \"king\" === currentPiece.type) {\n  //               const updatedPieces = pieces.reduce((results, piece) => {\n  //                 if (currentPiece === piece) {\n  //                   piece.x = y;\n  //                   piece.y = x;\n  //                   results.push(piece);\n  //                 }\n  //                 else if (!(piece.x === y && piece.y === x)) {\n  //                   results.push(piece);\n  //                 }\n  //                 return results;\n  //               }, []);\n  //               setPieces(updatedPieces);\n  //               if (gameState == \"started\")\n  //                 socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\n  //             }\n\n  //             // if (referee.inCheck(pieces)) {\n  //             //   console.log(\"Check\");\n  //             //   setOppInCheck(true);\n  //             //   socket.emit(\"clientToServerCheck\", \"Check\");\n  //             // }\n  //           }\n  //           else {\n  //             // RESETS  THE PIECE POSITION\n  //             activePiece.style.position = \"relative\";\n  //             activePiece.style.removeProperty('top');\n  //             activePiece.style.removeProperty('left');\n  //           }\n  //         }\n\n  //       }\n  //     }\n  //     setActivePiece(null);\n  //   }\n  // }\n\n  function promotePawn(type) {\n    if (promotionPawn) {\n      const updatedPieces = pieces.reduce((results, piece) => {\n        if (promotionPawn === piece) {\n          piece.type = type;\n          piece.image = !isBlackState ? piece.team === \"our\" ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png` : piece.team === \"our\" ? `/assets/images/B_${type}.png` : `/assets/images/W_${type}.png`;\n        }\n        results.push(piece);\n        return results;\n      }, []);\n      setPieces(updatedPieces);\n      // if (gameState == \"started\")\n      //   socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\n      pawnPromotionModalRef.current.classList.add('hidden');\n    }\n  }\n  function promotionTeamType() {\n    if (promotionPawn) return !isBlackState ? promotionPawn.team === \"our\" ? \"W\" : \"B\" : promotionPawn.team === \"our\" ? \"B\" : \"W\";\n  }\n  let board = [];\n  for (let i = 0; i < verticalAxis.length; ++i) {\n    for (let j = 0; j < horizontalAxis.length; ++j) {\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) image = p.image;\n      });\n      const dotsfound = dots.find(d => d.i === j && d.j === i);\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        isDotted: dotsfound ? true : false,\n        num: i * i + j,\n        image: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: pawnPromotionModalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"rook\"),\n          src: `/assets/images/${promotionTeamType()}_rook.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"queen\"),\n          src: `/assets/images/${promotionTeamType()}_queen.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"knight\"),\n          src: `/assets/images/${promotionTeamType()}_knight.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"bishop\"),\n          src: `/assets/images/${promotionTeamType()}_bishop.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      /*onMouseMove={e =>  movePiece(e)}*/onPointerDown: e => grabPiece(e) /*onMouseUp={e => dropPiece(e)}*/,\n      id: \"gameboard\",\n      ref: chessBoardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Number of Clients  = \", numClients]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: gameStartButtonRef,\n        onClick: startGameHandler,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"turnDis\",\n      children: [turn, \"'s  Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randomTestFunc,\n      children: \"RandomTest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(GameBoard, \"mbJEwBdCDBqaUseq4oPApv5mdjg=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Tile","Referee","GRID_SIZE","horizontalAxis","verticalAxis","io","piece","image","String","x","Number","y","type","team","enPassant","Boolean","initialBoardStateWhite","initialBoardStateBlack","p","teamType","pawns_x_cor","main_piece_x_cor","i","push","SOCKET_URL","socket","GameBoard","room","isBlack","gameState","setGameState","numClients","setNumClients","isBlackState","setIsBlackState","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","chessBoardRef","pawnPromotionModalRef","referee","promotionPawn","setPromotionPawn","gameStartButtonRef","turn","setTurn","dots","setDots","color","sessionStorage","getItem","emit","JSON","stringify","setInterval","fetch","method","headers","body","then","response","json","data","catch","error","console","current","classList","contains","add","remove","startGameHandler","randomTestFunc","find","log","bs","getBoardStateAfterMove","inCheck","grabPiece","e","chessboard","element","target","Math","floor","clientX","offsetLeft","clientY","offsetTop","a","d","j","updatedPieces","forEach","abs","inCheckMate","isStaleMate","currentPiece","dotsArr","isValidMove","b","isEnPassantMove","newBoardState","promotePawn","reduce","results","promotionTeamType","board","length","undefined","dotsfound"],"sources":["C:/Users/think/Desktop/Projects/Chess Project/frontend/chess-frontend/src/Components/GameBoard.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport './GameBoard.css'\r\nimport Tile from './Tile';\r\nimport Referee from './Referee';\r\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\r\nimport io from 'socket.io-client';\r\n\r\nexport let piece = {\r\n  image: String,\r\n  x: Number,\r\n  y: Number,\r\n  type: String,\r\n  team: String,\r\n  enPassant: Boolean\r\n}\r\n\r\n// array which holds the information regarding initial chess pieces and their \r\nconst initialBoardStateWhite = [];\r\n\r\nconst initialBoardStateBlack = [];\r\n\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const type = (!false) ? ((p === 0) ? \"B\" : \"W\") : ((p === 0) ? \"W\" : \"B\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateWhite.push({ image: `assets/images/${type}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_king.png`, x: main_piece_x_cor, y: 4, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateWhite.push({ image: `assets/images/${type}_queen.png`, x: main_piece_x_cor, y: 3, type: \"queen\", team: teamType });\r\n}\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const type = (!true) ? ((p === 0) ? \"B\" : \"W\") : ((p === 0) ? \"W\" : \"B\");\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardStateBlack.push({ image: `assets/images/${type}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType });\r\n  }\r\n  //rooks\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType });\r\n  //knights\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType });\r\n  //bishops\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType });\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType });\r\n  //kings\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_king.png`, x: main_piece_x_cor, y: 4, type: \"king\", team: teamType });\r\n  //queens\r\n  initialBoardStateBlack.push({ image: `assets/images/${type}_queen.png`, x: main_piece_x_cor, y: 3, type: \"queen\", team: teamType });\r\n}\r\n\r\n//the url where the web socket server is listening for connections\r\nconst SOCKET_URL = `ws://192.168.29.13:8085/`;\r\n\r\n// global socket object to use for communication with the server\r\nconst socket = io(SOCKET_URL);\r\n\r\n\r\nexport default function GameBoard({ room, isBlack }) {\r\n  // this is a state variable that is used to determine the state of the game ,\r\n  // we need to fetch this from the backend on component mount, but the fetching should be performed after 1 second  \r\n  const [gameState, setGameState] = useState(\"not_started\");\r\n\r\n  // state variable to hold the number of clients joined at any given point of time\r\n  const [numClients, setNumClients] = useState(0);\r\n\r\n  // state variable to determine if the state is white or black\r\n  const [isBlackState, setIsBlackState] = useState(false);\r\n\r\n\r\n  const [activePiece, setActivePiece] = useState(null);\r\n  const [gridX, setGridX] = useState(0);\r\n  const [gridY, setGridY] = useState(0);\r\n  // const [pieces, setPieces] = useState(isBlack ? initialBoardStateBlack : initialBoardStateWhite);\r\n  const [pieces, setPieces] = useState(initialBoardStateWhite);\r\n\r\n  const chessBoardRef = useRef(null);\r\n  const pawnPromotionModalRef = useRef(null);\r\n  const referee = new Referee();\r\n  const [promotionPawn, setPromotionPawn] = useState(null);\r\n  const gameStartButtonRef = useRef(null);\r\n  const [turn, setTurn] = useState(null)\r\n  const [dots, setDots] = useState([]);\r\n\r\n  // JOIN THE ROOM ON COMPONENT MOUNT + LEAVE THE ROOM ON Component Unmount\r\n  useEffect(() => {\r\n    let color = \"white\";\r\n    if (sessionStorage.getItem(room) != null) {\r\n      color = sessionStorage.getItem(room);\r\n      color === \"white\" ? setIsBlackState(false) : setIsBlackState(true);\r\n    }\r\n    socket.emit('joinRoomEvent', JSON.stringify({ 'room': `${room}`, 'color': `${color}` }));\r\n    return () => {\r\n      socket.emit('leaveRoomEvent', room);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      fetch('http://192.168.29.13:8080/api/num_clients', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: room\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          setNumClients(data[\"num_clients\"]);\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }, 1000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (gameStartButtonRef) {\r\n      if (numClients != 2 || gameState != 'not_started') {\r\n        if (!gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.add('two_clients');\r\n      }\r\n      else {\r\n        if (gameStartButtonRef.current.classList.contains('two_clients'))\r\n          gameStartButtonRef.current.classList.remove('two_clients');\r\n      }\r\n    }\r\n  }, [numClients, gameState]);\r\n\r\n\r\n  // socket.on(\"pieceInfo\", (data) => {\r\n  //   const jsondata = JSON.parse(data);\r\n  //   setPieces(jsondata[\"pieces\"]);\r\n  //   setGameState(jsondata[\"game_state\"]);\r\n\r\n  // });\r\n\r\n\r\n  //  socket.on(\"pieceMovementServerToClient\", async (data) => {\r\n  //   const jsondata = JSON.parse(data);\r\n  //   setPieces(jsondata[\"pieces\"]);\r\n  // });\r\n\r\n\r\n  // socket.on(\"youAreWhite\", () => {\r\n  //   setIsBlackState(false);\r\n  //   setPieces(initialBoardStateWhite);\r\n  //   setGameState(\"started\");\r\n  //   sessionStorage.setItem(room, \"white\");\r\n  // });\r\n\r\n\r\n  // socket.on(\"youAreBlack\", () => {\r\n  //   setIsBlackState(true);\r\n  //   setPieces(initialBoardStateBlack);\r\n  //   setGameState(\"started\");\r\n  //   sessionStorage.setItem(room, \"black\");\r\n  // });\r\n\r\n  function startGameHandler() {\r\n    socket.emit('startGameEvent', room);\r\n    setTurn(\"WHITE\");\r\n  }\r\n\r\n  function randomTestFunc() {\r\n    const piece = pieces.find((p) => p.y === 1 && p.x === 7);\r\n    console.log(piece);\r\n    const bs = referee.getBoardStateAfterMove(7, 1, 0, 5, pieces);\r\n    setPieces(bs);\r\n    console.log(referee.inCheck(bs, piece.team, \"\", \"\"));\r\n  }\r\n\r\n  function grabPiece(e) {\r\n    const chessboard = chessBoardRef.current;\r\n    const element = (e.target);\r\n    if (chessboard) {\r\n      if (!element.classList.contains(\"chess-piece\")) {\r\n        const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\r\n        const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\r\n        const a = dots.find((d) => d.i === x && d.j === y);\r\n        if (a) {\r\n          //here we make a normal move\r\n          const updatedPieces = [];\r\n          pieces.forEach((p) => {\r\n            if (p === activePiece) {\r\n              p.x = y;\r\n              p.y = x;\r\n              if ((0 === p.x || 7 === p.x) && p.type === \"pawn\") {\r\n                setPromotionPawn(p);\r\n                pawnPromotionModalRef.current.classList.remove('hidden');\r\n              }\r\n              if (Math.abs(p.x - y) === 2 && p.type === \"pawn\") {\r\n                p.enPassant = true;\r\n              }\r\n              else {\r\n                p.enPassant = true;\r\n              }\r\n              updatedPieces.push(p);\r\n            }\r\n            else {\r\n              if (p.type === \"pawn\") {\r\n                p.enPassant = false;\r\n              }\r\n              updatedPieces.push(p);\r\n            }\r\n          });\r\n          setPieces(updatedPieces);\r\n          setDots([]);\r\n          if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n            console.log(\"In Check\");\r\n            if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n              console.log(\"In CheckMate\");\r\n            }\r\n            else {\r\n              console.log(\" NOT In CheckMate\");\r\n            }\r\n          }\r\n          else {\r\n            if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n              console.log(\"In StaleMate\");\r\n            }\r\n            else {\r\n              console.log(\" NOT In StaleMate\");\r\n\r\n            }\r\n          }\r\n          console.log(\"Move Complete\");\r\n          setActivePiece(null);\r\n          //now the move is made\r\n        }\r\n      }\r\n      else {\r\n        const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\r\n        const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\r\n        const a = dots.find((d) => d.i === x && d.j === y);\r\n        if (a) {\r\n          //here we make a capture move\r\n          const updatedPieces = [];\r\n          pieces.forEach((p) => {\r\n            if (p === activePiece) {\r\n              p.x = a.j;\r\n              p.y = a.i;\r\n              if (p.type === \"pawn\") {\r\n                p.enPassant = false;\r\n              }\r\n              if ((0 === p.x || 7 === p.x) && p.type === \"pawn\") {\r\n                setPromotionPawn(p);\r\n                pawnPromotionModalRef.current.classList.remove('hidden');\r\n              }\r\n              updatedPieces.push(p);\r\n            }\r\n            else {\r\n              if (!(p.x === a.j && p.y === a.i)) {\r\n                if (p.type === \"pawn\") {\r\n                  p.enPassant = false;\r\n                }\r\n                updatedPieces.push(p);\r\n              }\r\n            }\r\n          });\r\n          setPieces(updatedPieces);\r\n          setDots([]);\r\n          if (referee.inCheck(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n            console.log(\"In Check\");\r\n            if (referee.inCheckMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n              console.log(\"In CheckMate\");\r\n            }\r\n            else {\r\n              console.log(\" NOT In CheckMate\");\r\n            }\r\n          }\r\n          else {\r\n            if (referee.isStaleMate(updatedPieces, activePiece.team === \"our\" ? \"opponent\" : \"our\") === true) {\r\n              console.log(\"In StaleMate\");\r\n            }\r\n            else {\r\n              console.log(\" NOT In StaleMate\");\r\n\r\n            }\r\n          }\r\n          setActivePiece(null);\r\n          // now the move is made\r\n        }\r\n        else {\r\n          const currentPiece = pieces.find(p => p.y === x && p.x === y);\r\n          const dotsArr = [];\r\n          for (let i = 0; i <= 7; ++i) {\r\n            for (let j = 0; j <= 7; j++) {\r\n              const a = referee.isValidMove(y, x, j, i, currentPiece.type, currentPiece.team, pieces, false);\r\n              const b = referee.isEnPassantMove(y, x, j, i, currentPiece.type, currentPiece.team, pieces);\r\n              if(b)\r\n              {\r\n                const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, i, j, pieces);\r\n                if (!referee.inCheck(newBoardState, currentPiece.team)) {\r\n                  dotsArr.push({ i: i, j: j });\r\n                }\r\n              }\r\n              if (a) {\r\n                const newBoardState = referee.getBoardStateAfterMove(currentPiece.x, currentPiece.y, i, j, pieces);\r\n                if (!referee.inCheck(newBoardState, currentPiece.team)) {\r\n                  dotsArr.push({ i: i, j: j });\r\n                }\r\n              }\r\n            }\r\n          }\r\n          setDots(dotsArr);\r\n          setActivePiece(currentPiece);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // function movePiece(e) {\r\n  //   const chessboard = chessBoardRef.current;\r\n  //   if (activePiece && chessboard) {\r\n  //     const minX = chessboard.offsetLeft;\r\n  //     const minY = chessboard.offsetTop;\r\n  //     const maxX = chessboard.offsetLeft + chessboard.clientWidth;\r\n  //     const maxY = chessboard.offsetTop + chessboard.clientHeight;\r\n  //     const x = e.clientX;\r\n  //     const y = e.clientY;\r\n  //     activePiece.style.position = \"absolute\";\r\n\r\n  //     // if (x < minX) {\r\n  //     //   activePiece.style.left = `${minX - GRID_SIZE / 2}px`;\r\n  //     // }\r\n  //     // else if (x > maxX) {\r\n  //     //   activePiece.style.left = `${maxX - GRID_SIZE / 2}px`;\r\n  //     // }\r\n  //     // else activePiece.style.left = `${x - GRID_SIZE / 2}px`;\r\n\r\n  //     // if (y < minY) {\r\n  //     //   activePiece.style.top = `${minY - GRID_SIZE / 2}px`;\r\n  //     // }\r\n  //     // else if (y > maxY) {\r\n  //     //   activePiece.style.top = `${maxY - GRID_SIZE / 2}px`;\r\n\r\n  //     // }\r\n  //     // else activePiece.style.top = `${y - GRID_SIZE / 2}px`;\r\n\r\n  //     activePiece.style.left = `${x - GRID_SIZE / 2}px`;\r\n  //     activePiece.style.top = `${y - GRID_SIZE / 2}px`\r\n  //   }\r\n  // }\r\n\r\n  setInterval(() => {\r\n    fetch('http://192.168.29.13:8080/api/turn', {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: room\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setTurn(data[\"turn\"]);\r\n      })\r\n      .catch(error => console.error('Error:', error));\r\n  }, 1000);\r\n\r\n  // async function dropPiece(e) {\r\n  //   const chessboard = chessBoardRef.current;\r\n  //   if (activePiece && chessboard) {\r\n  //     const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\r\n  //     const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\r\n  //     if(!(x>=0 && x<7 && y>=0 &&y<8))\r\n  //     {\r\n  //       activePiece.style.position = \"relative\";\r\n  //       activePiece.style.removeProperty('top');\r\n  //       activePiece.style.removeProperty('left');\r\n  //     }\r\n  //     else\r\n  //     {\r\n  //       const currentPiece = pieces.find(p => p.y === gridX && p.x === gridY);\r\n  //       if (currentPiece) {\r\n  //         const validMove = await referee.isValidMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces,room,isBlackState?\"black\":\"white\");\r\n  //         const isEnPassantMove = referee.isEnPassantMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\r\n  //         const pawnDirection = \"our\" === currentPiece.team ? 1 : -1;\r\n  //         if (isEnPassantMove) {\r\n  //           const updatedPieces = pieces.reduce((results, piece) => {\r\n  //             if (currentPiece === piece) {\r\n  //               piece.enPassant = false;\r\n  //               piece.x = y;\r\n  //               piece.y = x;\r\n  //               results.push(piece);\r\n  //             }\r\n  //             else if (!(piece.x === y + pawnDirection && piece.y === x)) {\r\n  //               if (\"pawn\" === piece.type)\r\n  //                 piece.enPassant = false;\r\n  //               results.push(piece);\r\n  //             }\r\n  //             return results;\r\n  //           }, []);\r\n  //           setPieces(updatedPieces);\r\n  //           if (gameState == \"started\")\r\n  //             socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\r\n  //         }\r\n  //         else {\r\n  //           if (validMove) {\r\n  //             if (\"pawn\" === currentPiece.type) {\r\n  //               const updatedPieces = pieces.reduce((results, piece) => {\r\n  //                 if (currentPiece === piece) {\r\n  //                   if (piece.type === \"pawn\" && Math.abs(y - gridY) === 2) {\r\n  //                     piece.enPassant = true;\r\n  //                   }\r\n  //                   else {\r\n  //                     piece.enPassant = false;\r\n  //                   }\r\n  //                   piece.x = y;\r\n  //                   piece.y = x;\r\n  //                   if (0 === piece.x || 7 === piece.x) {\r\n  //                     setPromotionPawn(currentPiece);\r\n  //                     pawnPromotionModalRef.current.classList.remove('hidden');\r\n  //                   }\r\n  //                   results.push(piece);\r\n  //                 }\r\n  //                 else if (!(piece.x === y && piece.y === x)) {\r\n  //                   if (\"pawn\" === piece.type)\r\n  //                     piece.enPassant = false;\r\n  //                   results.push(piece);\r\n  //                 }\r\n  //                 return results;\r\n  //               }, []);\r\n  //               setPieces(updatedPieces);\r\n  //               if (gameState == \"started\")\r\n  //                 socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\r\n  //             }\r\n  //             else if (\"knight\" === currentPiece.type || \"bishop\" === currentPiece.type || \"rook\" === currentPiece.type || \"queen\" === currentPiece.type || \"king\" === currentPiece.type) {\r\n  //               const updatedPieces = pieces.reduce((results, piece) => {\r\n  //                 if (currentPiece === piece) {\r\n  //                   piece.x = y;\r\n  //                   piece.y = x;\r\n  //                   results.push(piece);\r\n  //                 }\r\n  //                 else if (!(piece.x === y && piece.y === x)) {\r\n  //                   results.push(piece);\r\n  //                 }\r\n  //                 return results;\r\n  //               }, []);\r\n  //               setPieces(updatedPieces);\r\n  //               if (gameState == \"started\")\r\n  //                 socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\r\n  //             }\r\n\r\n  //             // if (referee.inCheck(pieces)) {\r\n  //             //   console.log(\"Check\");\r\n  //             //   setOppInCheck(true);\r\n  //             //   socket.emit(\"clientToServerCheck\", \"Check\");\r\n  //             // }\r\n  //           }\r\n  //           else {\r\n  //             // RESETS  THE PIECE POSITION\r\n  //             activePiece.style.position = \"relative\";\r\n  //             activePiece.style.removeProperty('top');\r\n  //             activePiece.style.removeProperty('left');\r\n  //           }\r\n  //         }\r\n\r\n  //       }\r\n  //     }\r\n  //     setActivePiece(null);\r\n  //   }\r\n  // }\r\n\r\n  function promotePawn(type) {\r\n    if (promotionPawn) {\r\n      const updatedPieces = pieces.reduce((results, piece) => {\r\n        if (promotionPawn === piece) {\r\n          piece.type = type;\r\n          piece.image = (!isBlackState) ? ((piece.team === \"our\") ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png`) : ((piece.team === \"our\") ? `/assets/images/B_${type}.png` : `/assets/images/W_${type}.png`);\r\n        }\r\n        results.push(piece);\r\n        return results;\r\n      }, []);\r\n      setPieces(updatedPieces);\r\n      // if (gameState == \"started\")\r\n      //   socket.emit('pieceMovementClientToServer', JSON.stringify({ \"pieceArr\": updatedPieces, \"team\": isBlackState ? \"black\" : \"white\", \"roomId\": room }));\r\n      pawnPromotionModalRef.current.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  function promotionTeamType() {\r\n    if (promotionPawn)\r\n      return (!isBlackState) ? (promotionPawn.team === \"our\" ? \"W\" : \"B\") : (promotionPawn.team === \"our\" ? \"B\" : \"W\");\r\n  }\r\n\r\n\r\n  let board = [];\r\n  for (let i = 0; i < verticalAxis.length; ++i) {\r\n    for (let j = 0; j < horizontalAxis.length; ++j) {\r\n      let image = undefined;\r\n      pieces.forEach(p => { if (p.x === i && p.y === j) image = p.image });\r\n      const dotsfound = dots.find((d) => d.i === j && d.j === i)\r\n      board.push(<Tile isDotted={dotsfound ? true : false} num={i * i + j} image={image} />);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div id=\"pawn-promotion-modal\" className='hidden' ref={pawnPromotionModalRef}>\r\n        <div className='modal-body' >\r\n          <img onClick={() => promotePawn(\"rook\")} src={`/assets/images/${promotionTeamType()}_rook.png`} />\r\n          <img onClick={() => promotePawn(\"queen\")} src={`/assets/images/${promotionTeamType()}_queen.png`} />\r\n          <img onClick={() => promotePawn(\"knight\")} src={`/assets/images/${promotionTeamType()}_knight.png`} />\r\n          <img onClick={() => promotePawn(\"bishop\")} src={`/assets/images/${promotionTeamType()}_bishop.png`} />\r\n        </div>\r\n      </div>\r\n      <div /*onMouseMove={e =>  movePiece(e)}*/ onPointerDown={e => grabPiece(e)} /*onMouseUp={e => dropPiece(e)}*/ id=\"gameboard\" ref={chessBoardRef}>\r\n        {board}\r\n      </div>\r\n      <div> <b>Number of Clients  = {numClients}</b></div>\r\n      <div>\r\n        <button ref={gameStartButtonRef} onClick={startGameHandler}>Start Game</button>\r\n      </div>\r\n      <div className='turnDis' >\r\n        {turn}'s  Turn\r\n      </div>\r\n      <button onClick={randomTestFunc}>RandomTest</button>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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C,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACnD,CAAC,EAAE,IAAI,CAAC;;EAER;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,SAASuC,WAAW,CAAChG,IAAI,EAAE;IACzB,IAAIkC,aAAa,EAAE;MACjB,MAAMmD,aAAa,GAAGxD,MAAM,CAACoE,MAAM,CAAC,CAACC,OAAO,EAAExG,KAAK,KAAK;QACtD,IAAIwC,aAAa,KAAKxC,KAAK,EAAE;UAC3BA,KAAK,CAACM,IAAI,GAAGA,IAAI;UACjBN,KAAK,CAACC,KAAK,GAAI,CAAC0B,YAAY,GAAM3B,KAAK,CAACO,IAAI,KAAK,KAAK,GAAK,oBAAmBD,IAAK,MAAK,GAAI,oBAAmBA,IAAK,MAAK,GAAMN,KAAK,CAACO,IAAI,KAAK,KAAK,GAAK,oBAAmBD,IAAK,MAAK,GAAI,oBAAmBA,IAAK,MAAM;QACzN;QACAkG,OAAO,CAACvF,IAAI,CAACjB,KAAK,CAAC;QACnB,OAAOwG,OAAO;MAChB,CAAC,EAAE,EAAE,CAAC;MACNpE,SAAS,CAACuD,aAAa,CAAC;MACxB;MACA;MACArD,qBAAqB,CAAC2B,OAAO,CAACC,SAAS,CAACE,GAAG,CAAC,QAAQ,C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"},"metadata":{},"sourceType":"module","externalDependencies":[]}