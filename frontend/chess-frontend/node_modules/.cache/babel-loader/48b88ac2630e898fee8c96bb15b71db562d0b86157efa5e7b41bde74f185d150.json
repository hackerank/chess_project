{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\think\\\\Desktop\\\\Projects\\\\Chess Project\\\\frontend\\\\chess-frontend\\\\src\\\\Components\\\\GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './GameBoard.css';\nimport Tile from './Tile';\nimport Referee from './Referee';\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst room = prompt('Enter room');\nconst socket = io(`ws://192.168.29.13:8085/?room=${room}`);\nconst parr = [];\nfor (let i = 0; i < 8; ++i) {\n  for (let j = 7; j >= 0; j--) {\n    parr.push([[i, j], [7 - i, 7 - j]]);\n  }\n}\nconst revCorMap = new Map(parr);\nexport let piece = {\n  image: String,\n  x: Number,\n  y: Number,\n  type: String,\n  team: String,\n  enPassant: Boolean\n};\n\n// array which holds the information regarding initial chess pieces and their \nconst initialBoardState = [];\n\n// here we init the board state on game start\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? \"opponent\" : \"our\";\n  const type = p === 0 ? \"B\" : \"W\";\n  const pawns_x_cor = p === 0 ? 1 : 6;\n  const main_piece_x_cor = p === 0 ? 0 : 7;\n  //pawns\n  for (let i = 0; i < 8; ++i) {\n    initialBoardState.push({\n      image: `assets/images/${type}_pawn.png`,\n      x: pawns_x_cor,\n      y: i,\n      type: \"pawn\",\n      team: teamType,\n      validMoves: []\n    });\n  }\n  //rooks\n  initialBoardState.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 0,\n    type: \"rook\",\n    team: teamType,\n    validMoves: []\n  });\n  initialBoardState.push({\n    image: `assets/images/${type}_rook.png`,\n    x: main_piece_x_cor,\n    y: 7,\n    type: \"rook\",\n    team: teamType,\n    validMoves: []\n  });\n\n  //knights\n  initialBoardState.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 1,\n    type: \"knight\",\n    team: teamType,\n    validMoves: []\n  });\n  initialBoardState.push({\n    image: `assets/images/${type}_knight.png`,\n    x: main_piece_x_cor,\n    y: 6,\n    type: \"knight\",\n    team: teamType,\n    validMoves: []\n  });\n\n  //bishops\n  initialBoardState.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 2,\n    type: \"bishop\",\n    team: teamType,\n    validMoves: []\n  });\n  initialBoardState.push({\n    image: `assets/images/${type}_bishop.png`,\n    x: main_piece_x_cor,\n    y: 5,\n    type: \"bishop\",\n    team: teamType,\n    validMoves: []\n  });\n\n  //kings\n  initialBoardState.push({\n    image: `assets/images/${type}_king.png`,\n    x: main_piece_x_cor,\n    y: 4,\n    type: \"king\",\n    team: teamType,\n    validMoves: []\n  });\n\n  //queens\n  initialBoardState.push({\n    image: `assets/images/${type}_queen.png`,\n    x: main_piece_x_cor,\n    y: 3,\n    type: \"queen\",\n    team: teamType,\n    validMoves: []\n  });\n}\nexport default function GameBoard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessBoardRef = useRef(null);\n  const pawnPromotionModalRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState(null);\n  socket.on('serverToClient', data => {\n    setPieces(JSON.parse(data)[\"data\"]);\n  });\n  // console.log(initialBoardState);\n  convertWhiteToBlack(initialBoardState);\n  function convertWhiteToBlack(pieces) {\n    const newPieces = [];\n    pieces.forEach(piece => {\n      let ele = piece;\n      console.log(piece);\n      ele[\"x\"] = 7 - piece[\"x\"];\n      ele[\"y\"] = 7 - piece[\"y\"];\n      console.log(ele);\n      newPieces.push(ele);\n    });\n    return newPieces;\n  }\n  function grabPiece(e) {\n    const chessboard = chessBoardRef.current;\n    const element = e.target;\n    // e.setPointerCapture(e.pointerId);\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE));\n      const x = e.clientX;\n      const y = e.clientY;\n      element.style.position = \"absolute\";\n      element.style.left = `${x - GRID_SIZE / 2}px`;\n      element.style.top = `${y - GRID_SIZE / 2}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessBoardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft;\n      const minY = chessboard.offsetTop;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight;\n      const x = e.clientX;\n      const y = e.clientY;\n      activePiece.style.position = \"absolute\";\n      if (x < minX) {\n        activePiece.style.left = `${minX - GRID_SIZE / 2}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX - GRID_SIZE / 2}px`;\n      } else activePiece.style.left = `${x - GRID_SIZE / 2}px`;\n      if (y < minY) {\n        activePiece.style.top = `${minY - GRID_SIZE / 2}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY - GRID_SIZE / 2}px`;\n      } else activePiece.style.top = `${y - GRID_SIZE / 2}px`;\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessBoardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\n      const currentPiece = pieces.find(p => p.y === gridX && p.x === gridY);\n      if (currentPiece) {\n        const validMove = referee.isValidMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = referee.isEnPassantMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirection = \"our\" === currentPiece.team ? 1 : -1;\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (currentPiece === piece) {\n              piece.enPassant = false;\n              piece.x = y;\n              piece.y = x;\n              results.push(piece);\n            } else if (!(piece.x === y + pawnDirection && piece.y === x)) {\n              if (\"pawn\" === piece.type) piece.enPassant = false;\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n          // here we are changing the state \n\n          socket.emit('clientToServer', JSON.stringify({\n            \"data\": updatedPieces\n          }));\n        } else {\n          if (validMove) {\n            //UPDATES THE PIECE POSITION\n            // AND IF A PIECE IS ATTACKED , REMOVES IT\n            if (\"pawn\" === currentPiece.type) {\n              const updatedPieces = pieces.reduce((results, piece) => {\n                if (currentPiece === piece) {\n                  if (piece.type === \"pawn\" && Math.abs(y - gridY) === 2) {\n                    //EN PASSANT ATTACKABLE PIECE\n                    piece.enPassant = true;\n                  } else {\n                    piece.enPassant = false;\n                  }\n                  piece.x = y;\n                  piece.y = x;\n                  if (0 === piece.x || 7 === piece.x) {\n                    console.log(`we need to promote our team pawn`);\n                    setPromotionPawn(currentPiece);\n                    pawnPromotionModalRef.current.classList.remove('hidden');\n                  }\n                  results.push(piece);\n                } else if (!(piece.x === y && piece.y === x)) {\n                  if (\"pawn\" === piece.type) piece.enPassant = false;\n                  results.push(piece);\n                }\n                return results;\n              }, []);\n              setPieces(updatedPieces);\n              // here we are changing the state \n              socket.emit('clientToServer', JSON.stringify({\n                \"data\": updatedPieces\n              }));\n            } else if (\"knight\" === currentPiece.type || \"bishop\" === currentPiece.type || \"rook\" === currentPiece.type || \"queen\" === currentPiece.type || \"king\" === currentPiece.type) {\n              const updatedPieces = pieces.reduce((results, piece) => {\n                if (currentPiece === piece) {\n                  piece.x = y;\n                  piece.y = x;\n                  results.push(piece);\n                } else if (!(piece.x === y && piece.y === x)) {\n                  results.push(piece);\n                }\n                return results;\n              }, []);\n              setPieces(updatedPieces);\n              // here we are changing the state \n              socket.emit('clientToServer', JSON.stringify({\n                \"data\": updatedPieces\n              }));\n            }\n          } else {\n            // RESETS  THE PIECE POSITION\n            activePiece.style.position = \"relative\";\n            activePiece.style.removeProperty('top');\n            activePiece.style.removeProperty('left');\n          }\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  function promotePawn(type) {\n    if (promotionPawn) {\n      const updatedPieces = pieces.reduce((results, piece) => {\n        if (promotionPawn === piece) {\n          piece.type = type;\n          piece.image = piece.team === \"our\" ? `/assets/images/W_${type}.png` : `/assets/images/B_${type}.png`;\n        }\n        results.push(piece);\n        return results;\n      }, []);\n      setPieces(updatedPieces);\n      pawnPromotionModalRef.current.classList.add('hidden');\n    }\n  }\n  function promotionTeamType() {\n    if (promotionPawn) return promotionPawn.team === \"our\" ? \"W\" : \"B\";\n  }\n  let board = [];\n  for (let i = 0; i < verticalAxis.length; ++i) {\n    for (let j = 0; j < horizontalAxis.length; ++j) {\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) image = p.image;\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        num: i * i + j,\n        image: image\n      }, `${i}${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: pawnPromotionModalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"rook\"),\n          src: `/assets/images/${promotionTeamType()}_rook.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"queen\"),\n          src: `/assets/images/${promotionTeamType()}_queen.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"knight\"),\n          src: `/assets/images/${promotionTeamType()}_knight.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(\"bishop\"),\n          src: `/assets/images/${promotionTeamType()}_bishop.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onPointerMove: e => movePiece(e),\n      onPointerDown: e => grabPiece(e),\n      onPointerUp: e => dropPiece(e),\n      id: \"gameboard\",\n      ref: chessBoardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(GameBoard, \"HDOgVEj3GcDt8X066lKzI0u8ehk=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useRef","useState","Tile","Referee","GRID_SIZE","horizontalAxis","verticalAxis","io","room","prompt","socket","parr","i","j","push","revCorMap","Map","piece","image","String","x","Number","y","type","team","enPassant","Boolean","initialBoardState","p","teamType","pawns_x_cor","main_piece_x_cor","validMoves","GameBoard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","chessBoardRef","pawnPromotionModalRef","referee","promotionPawn","setPromotionPawn","on","data","JSON","parse","convertWhiteToBlack","newPieces","forEach","ele","console","log","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","validMove","isValidMove","isEnPassantMove","pawnDirection","updatedPieces","reduce","results","emit","stringify","abs","remove","removeProperty","promotePawn","add","promotionTeamType","board","length","undefined"],"sources":["C:/Users/think/Desktop/Projects/Chess Project/frontend/chess-frontend/src/Components/GameBoard.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport './GameBoard.css'\r\nimport Tile from './Tile';\r\nimport Referee from './Referee';\r\nimport { GRID_SIZE, horizontalAxis, verticalAxis } from '../constants';\r\nimport  io  from 'socket.io-client';\r\n\r\nconst room = prompt('Enter room');\r\n\r\nconst socket = io(`ws://192.168.29.13:8085/?room=${room}`);\r\n\r\nconst parr = [];\r\n\r\nfor (let i = 0; i < 8; ++i) {\r\n  for (let j = 7; j >= 0; j--) {\r\n    parr.push([[i, j], [7 - i, 7 - j]]);\r\n  }\r\n}\r\n\r\nconst revCorMap = new Map(parr);\r\n\r\nexport let piece = {\r\n  image: String,\r\n  x: Number,\r\n  y: Number,\r\n  type: String,\r\n  team: String,\r\n  enPassant: Boolean\r\n}\r\n\r\n// array which holds the information regarding initial chess pieces and their \r\nconst initialBoardState = [];\r\n\r\n// here we init the board state on game start\r\nfor (let p = 0; p < 2; p++) {\r\n  const teamType = (p === 0) ? \"opponent\" : \"our\";\r\n  const type = (p === 0) ? \"B\" : \"W\";\r\n  const pawns_x_cor = (p === 0) ? 1 : 6;\r\n  const main_piece_x_cor = (p === 0) ? 0 : 7;\r\n  //pawns\r\n  for (let i = 0; i < 8; ++i) {\r\n    initialBoardState.push({ image: `assets/images/${type}_pawn.png`, x: pawns_x_cor, y: i, type: \"pawn\", team: teamType ,validMoves:[]})\r\n  }\r\n  //rooks\r\n  initialBoardState.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 0, type: \"rook\", team: teamType ,validMoves:[]})\r\n  initialBoardState.push({ image: `assets/images/${type}_rook.png`, x: main_piece_x_cor, y: 7, type: \"rook\", team: teamType ,validMoves:[]})\r\n\r\n  //knights\r\n  initialBoardState.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 1, type: \"knight\", team: teamType ,validMoves:[]})\r\n  initialBoardState.push({ image: `assets/images/${type}_knight.png`, x: main_piece_x_cor, y: 6, type: \"knight\", team: teamType ,validMoves:[]})\r\n\r\n  //bishops\r\n  initialBoardState.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 2, type: \"bishop\", team: teamType ,validMoves:[]})\r\n  initialBoardState.push({ image: `assets/images/${type}_bishop.png`, x: main_piece_x_cor, y: 5, type: \"bishop\", team: teamType ,validMoves:[]})\r\n\r\n  //kings\r\n  initialBoardState.push({ image: `assets/images/${type}_king.png`, x: main_piece_x_cor, y: 4, type: \"king\", team: teamType ,validMoves:[]})\r\n\r\n  //queens\r\n  initialBoardState.push({ image: `assets/images/${type}_queen.png`, x: main_piece_x_cor, y: 3, type: \"queen\", team: teamType ,validMoves:[]})\r\n}\r\n\r\n\r\nexport default function GameBoard() {\r\n  const [activePiece, setActivePiece] = useState(null);\r\n  const [gridX, setGridX] = useState(0);\r\n  const [gridY, setGridY] = useState(0);\r\n  const [pieces, setPieces] = useState(initialBoardState);\r\n  const chessBoardRef = useRef(null);\r\n  const pawnPromotionModalRef = useRef(null);\r\n  const referee = new Referee();\r\n  const [promotionPawn,setPromotionPawn] = useState(null);\r\n\r\n  socket.on('serverToClient',(data)=>{\r\n    setPieces(JSON.parse(data)[\"data\"]); \r\n  })\r\n  // console.log(initialBoardState);\r\n  convertWhiteToBlack(initialBoardState);\r\n  function convertWhiteToBlack(pieces) {\r\n    const newPieces = [];\r\n    pieces.forEach((piece) => {\r\n      let ele = piece;\r\n      console.log(piece);\r\n      ele[\"x\"] = 7 - piece[\"x\"];\r\n      ele[\"y\"] = 7 - piece[\"y\"];\r\n      console.log(ele);\r\n\r\n      newPieces.push(ele);\r\n    })\r\n    return newPieces;\r\n  }\r\n\r\n  function grabPiece(e) {\r\n    const chessboard = chessBoardRef.current;\r\n    const element = (e.target);\r\n    // e.setPointerCapture(e.pointerId);\r\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\r\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\r\n      setGridY(Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE));\r\n      const x = e.clientX;\r\n      const y = e.clientY;\r\n      element.style.position = \"absolute\";\r\n      element.style.left = `${x - GRID_SIZE / 2}px`;\r\n      element.style.top = `${y - GRID_SIZE / 2}px`;\r\n      setActivePiece(element); \r\n    }\r\n  }\r\n\r\n  function movePiece(e) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const minX = chessboard.offsetLeft;\r\n      const minY = chessboard.offsetTop;\r\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth;\r\n      const maxY = chessboard.offsetTop + chessboard.clientHeight;\r\n      const x = e.clientX;\r\n      const y = e.clientY;\r\n      activePiece.style.position = \"absolute\";\r\n\r\n      if (x < minX) {\r\n        activePiece.style.left = `${minX - GRID_SIZE / 2}px`;\r\n      }\r\n      else if (x > maxX) {\r\n        activePiece.style.left = `${maxX - GRID_SIZE / 2}px`;\r\n      }\r\n      else activePiece.style.left = `${x - GRID_SIZE / 2}px`;\r\n\r\n      if (y < minY) {\r\n        activePiece.style.top = `${minY - GRID_SIZE / 2}px`;\r\n      }\r\n      else if (y > maxY) {\r\n        activePiece.style.top = `${maxY - GRID_SIZE / 2}px`;\r\n\r\n      }\r\n      else activePiece.style.top = `${y - GRID_SIZE / 2}px`;\r\n    }\r\n  }\r\n\r\n  function dropPiece(e) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\r\n      const y = Math.floor((e.clientY - chessboard.offsetTop) / GRID_SIZE);\r\n      const currentPiece = pieces.find(p => p.y === gridX && p.x === gridY);\r\n      if (currentPiece) {\r\n        const validMove = referee.isValidMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\r\n        const isEnPassantMove = referee.isEnPassantMove(gridY, gridX, y, x, currentPiece.type, currentPiece.team, pieces);\r\n        const pawnDirection = \"our\" === currentPiece.team ? 1 : -1;\r\n        if (isEnPassantMove) {\r\n          const updatedPieces = pieces.reduce((results, piece) => {\r\n            if (currentPiece === piece) {\r\n              piece.enPassant = false;\r\n              piece.x = y;\r\n              piece.y = x;\r\n              results.push(piece);\r\n            }\r\n            else if (!(piece.x === y + pawnDirection && piece.y === x)) {\r\n              if (\"pawn\" === piece.type)\r\n                piece.enPassant = false;\r\n              results.push(piece);\r\n            }\r\n            return results;\r\n          }, []);\r\n          setPieces(updatedPieces);\r\n          // here we are changing the state \r\n          \r\n          socket.emit('clientToServer',JSON.stringify({\"data\":updatedPieces}));\r\n        }\r\n        else {\r\n          if (validMove) {\r\n            //UPDATES THE PIECE POSITION\r\n            // AND IF A PIECE IS ATTACKED , REMOVES IT\r\n            if (\"pawn\" === currentPiece.type) {\r\n              const updatedPieces = pieces.reduce((results, piece) => {\r\n                if (currentPiece === piece) {\r\n                  if (piece.type === \"pawn\" && Math.abs(y - gridY) === 2) {\r\n                    //EN PASSANT ATTACKABLE PIECE\r\n                    piece.enPassant = true;\r\n                  }\r\n                  else {\r\n                    piece.enPassant = false;\r\n                  }\r\n                  piece.x = y;\r\n                  piece.y = x;\r\n                  if(0 === piece.x || 7 === piece.x)\r\n                  {\r\n                    console.log(`we need to promote our team pawn`);\r\n                    setPromotionPawn(currentPiece);\r\n                    pawnPromotionModalRef.current.classList.remove('hidden');\r\n                  }\r\n                  results.push(piece);\r\n                }\r\n                else if (!(piece.x === y && piece.y === x)) {\r\n                  if (\"pawn\" === piece.type)\r\n                    piece.enPassant = false;\r\n                  results.push(piece);\r\n                }\r\n                return results;\r\n              }, []);\r\n              setPieces(updatedPieces);\r\n          // here we are changing the state \r\n          socket.emit('clientToServer',JSON.stringify({\"data\":updatedPieces}));\r\n            }\r\n            else if (\"knight\" === currentPiece.type || \"bishop\" === currentPiece.type || \"rook\" === currentPiece.type || \"queen\" === currentPiece.type || \"king\" === currentPiece.type) {\r\n              const updatedPieces = pieces.reduce((results, piece) => {\r\n                if (currentPiece === piece) {\r\n                  piece.x = y;\r\n                  piece.y = x;\r\n                  results.push(piece);\r\n                }\r\n                else if (!(piece.x === y && piece.y === x)) {\r\n                  results.push(piece);\r\n                }\r\n                return results;\r\n              }, []);\r\n              setPieces(updatedPieces);\r\n          // here we are changing the state \r\n          socket.emit('clientToServer',JSON.stringify({\"data\":updatedPieces}));\r\n            }\r\n\r\n          }\r\n          else {\r\n            // RESETS  THE PIECE POSITION\r\n            activePiece.style.position = \"relative\";\r\n            activePiece.style.removeProperty('top');\r\n            activePiece.style.removeProperty('left');\r\n          }\r\n        }\r\n\r\n      }\r\n      setActivePiece(null);\r\n    }\r\n  }\r\n\r\n  function promotePawn(type)\r\n  {\r\n    if (promotionPawn) {\r\n      const updatedPieces = pieces.reduce((results, piece) => {\r\n        if (promotionPawn === piece) {\r\n          piece.type = type;\r\n          piece.image = (piece.team === \"our\") ? `/assets/images/W_${type}.png`:`/assets/images/B_${type}.png`;\r\n        }\r\n        results.push(piece);\r\n        return results;\r\n      }, []);\r\n    setPieces(updatedPieces);\r\n    pawnPromotionModalRef.current.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  function promotionTeamType()\r\n  {\r\n    if(promotionPawn)\r\n    return promotionPawn.team === \"our\" ? \"W\" : \"B\";\r\n  }\r\n\r\n  let board = [];\r\n  for (let i = 0; i < verticalAxis.length; ++i) {\r\n    for (let j = 0; j < horizontalAxis.length; ++j) {\r\n      let image = undefined;\r\n      pieces.forEach(p => { if (p.x === i && p.y === j) image = p.image });\r\n      board.push(<Tile key={`${i}${j}`} num={i * i + j} image={image} />);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div id=\"pawn-promotion-modal\" className='hidden' ref={pawnPromotionModalRef}>\r\n        <div className='modal-body' >\r\n          <img onClick={() => promotePawn(\"rook\")} src={`/assets/images/${promotionTeamType()}_rook.png`} />\r\n          <img onClick={() => promotePawn(\"queen\")} src={`/assets/images/${promotionTeamType()}_queen.png`} />\r\n          <img onClick={() => promotePawn(\"knight\")} src={`/assets/images/${promotionTeamType()}_knight.png`} />\r\n          <img onClick={() => promotePawn(\"bishop\")} src={`/assets/images/${promotionTeamType()}_bishop.png`} />\r\n        </div>\r\n\r\n      </div>\r\n      <div onPointerMove={e => movePiece(e)} onPointerDown={e => grabPiece(e)} onPointerUp={e => dropPiece(e)} id=\"gameboard\" ref={chessBoardRef}>\r\n        {board}\r\n      </div>\r\n    </>\r\n\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAO,iBAAiB;AACxB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,SAAS,EAAEC,cAAc,EAAEC,YAAY,QAAQ,cAAc;AACtE,OAAQC,EAAE,MAAO,kBAAkB;AAAC;AAAA;AAEpC,MAAMC,IAAI,GAAGC,MAAM,CAAC,YAAY,CAAC;AAEjC,MAAMC,MAAM,GAAGH,EAAE,CAAE,iCAAgCC,IAAK,EAAC,CAAC;AAE1D,MAAMG,IAAI,GAAG,EAAE;AAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3BF,IAAI,CAACG,IAAI,CAAC,CAAC,CAACF,CAAC,EAAEC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGD,CAAC,EAAE,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;EACrC;AACF;AAEA,MAAME,SAAS,GAAG,IAAIC,GAAG,CAACL,IAAI,CAAC;AAE/B,OAAO,IAAIM,KAAK,GAAG;EACjBC,KAAK,EAAEC,MAAM;EACbC,CAAC,EAAEC,MAAM;EACTC,CAAC,EAAED,MAAM;EACTE,IAAI,EAAEJ,MAAM;EACZK,IAAI,EAAEL,MAAM;EACZM,SAAS,EAAEC;AACb,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAG,EAAE;;AAE5B;AACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EAC1B,MAAMC,QAAQ,GAAID,CAAC,KAAK,CAAC,GAAI,UAAU,GAAG,KAAK;EAC/C,MAAML,IAAI,GAAIK,CAAC,KAAK,CAAC,GAAI,GAAG,GAAG,GAAG;EAClC,MAAME,WAAW,GAAIF,CAAC,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC;EACrC,MAAMG,gBAAgB,GAAIH,CAAC,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC;EAC1C;EACA,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;IAC1Be,iBAAiB,CAACb,IAAI,CAAC;MAAEI,KAAK,EAAG,iBAAgBK,IAAK,WAAU;MAAEH,CAAC,EAAEU,WAAW;MAAER,CAAC,EAAEV,CAAC;MAAEW,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEK,QAAQ;MAAEG,UAAU,EAAC;IAAE,CAAC,CAAC;EACvI;EACA;EACAL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,WAAU;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;EAC1IL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,WAAU;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;;EAE1I;EACAL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,aAAY;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;EAC9IL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,aAAY;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;;EAE9I;EACAL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,aAAY;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;EAC9IL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,aAAY;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;;EAE9I;EACAL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,WAAU;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;;EAE1I;EACAL,iBAAiB,CAACb,IAAI,CAAC;IAAEI,KAAK,EAAG,iBAAgBK,IAAK,YAAW;IAAEH,CAAC,EAAEW,gBAAgB;IAAET,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAEK,QAAQ;IAAEG,UAAU,EAAC;EAAE,CAAC,CAAC;AAC9I;AAGA,eAAe,SAASC,SAAS,GAAG;EAAA;EAClC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACmC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACqC,KAAK,EAAEC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACuC,MAAM,EAAEC,SAAS,CAAC,GAAGxC,QAAQ,CAAC0B,iBAAiB,CAAC;EACvD,MAAMe,aAAa,GAAG1C,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM2C,qBAAqB,GAAG3C,MAAM,CAAC,IAAI,CAAC;EAC1C,MAAM4C,OAAO,GAAG,IAAIzC,OAAO,EAAE;EAC7B,MAAM,CAAC0C,aAAa,EAACC,gBAAgB,CAAC,GAAG7C,QAAQ,CAAC,IAAI,CAAC;EAEvDS,MAAM,CAACqC,EAAE,CAAC,gBAAgB,EAAEC,IAAI,IAAG;IACjCP,SAAS,CAACQ,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;EACrC,CAAC,CAAC;EACF;EACAG,mBAAmB,CAACxB,iBAAiB,CAAC;EACtC,SAASwB,mBAAmB,CAACX,MAAM,EAAE;IACnC,MAAMY,SAAS,GAAG,EAAE;IACpBZ,MAAM,CAACa,OAAO,CAAEpC,KAAK,IAAK;MACxB,IAAIqC,GAAG,GAAGrC,KAAK;MACfsC,OAAO,CAACC,GAAG,CAACvC,KAAK,CAAC;MAClBqC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGrC,KAAK,CAAC,GAAG,CAAC;MACzBqC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGrC,KAAK,CAAC,GAAG,CAAC;MACzBsC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAEhBF,SAAS,CAACtC,IAAI,CAACwC,GAAG,CAAC;IACrB,CAAC,CAAC;IACF,OAAOF,SAAS;EAClB;EAEA,SAASK,SAAS,CAACC,CAAC,EAAE;IACpB,MAAMC,UAAU,GAAGjB,aAAa,CAACkB,OAAO;IACxC,MAAMC,OAAO,GAAIH,CAAC,CAACI,MAAO;IAC1B;IACA,IAAID,OAAO,CAACE,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAIL,UAAU,EAAE;MAC3DtB,QAAQ,CAAC4B,IAAI,CAACC,KAAK,CAAC,CAACR,CAAC,CAACS,OAAO,GAAGR,UAAU,CAACS,UAAU,IAAIhE,SAAS,CAAC,CAAC;MACrEmC,QAAQ,CAAC0B,IAAI,CAACC,KAAK,CAAC,CAACR,CAAC,CAACW,OAAO,GAAGV,UAAU,CAACW,SAAS,IAAIlE,SAAS,CAAC,CAAC;MACpE,MAAMgB,CAAC,GAAGsC,CAAC,CAACS,OAAO;MACnB,MAAM7C,CAAC,GAAGoC,CAAC,CAACW,OAAO;MACnBR,OAAO,CAACU,KAAK,CAACC,QAAQ,GAAG,UAAU;MACnCX,OAAO,CAACU,KAAK,CAACE,IAAI,GAAI,GAAErD,CAAC,GAAGhB,SAAS,GAAG,CAAE,IAAG;MAC7CyD,OAAO,CAACU,KAAK,CAACG,GAAG,GAAI,GAAEpD,CAAC,GAAGlB,SAAS,GAAG,CAAE,IAAG;MAC5C+B,cAAc,CAAC0B,OAAO,CAAC;IACzB;EACF;EAEA,SAASc,SAAS,CAACjB,CAAC,EAAE;IACpB,MAAMC,UAAU,GAAGjB,aAAa,CAACkB,OAAO;IACxC,IAAI1B,WAAW,IAAIyB,UAAU,EAAE;MAC7B,MAAMiB,IAAI,GAAGjB,UAAU,CAACS,UAAU;MAClC,MAAMS,IAAI,GAAGlB,UAAU,CAACW,SAAS;MACjC,MAAMQ,IAAI,GAAGnB,UAAU,CAACS,UAAU,GAAGT,UAAU,CAACoB,WAAW;MAC3D,MAAMC,IAAI,GAAGrB,UAAU,CAACW,SAAS,GAAGX,UAAU,CAACsB,YAAY;MAC3D,MAAM7D,CAAC,GAAGsC,CAAC,CAACS,OAAO;MACnB,MAAM7C,CAAC,GAAGoC,CAAC,CAACW,OAAO;MACnBnC,WAAW,CAACqC,KAAK,CAACC,QAAQ,GAAG,UAAU;MAEvC,IAAIpD,CAAC,GAAGwD,IAAI,EAAE;QACZ1C,WAAW,CAACqC,KAAK,CAACE,IAAI,GAAI,GAAEG,IAAI,GAAGxE,SAAS,GAAG,CAAE,IAAG;MACtD,CAAC,MACI,IAAIgB,CAAC,GAAG0D,IAAI,EAAE;QACjB5C,WAAW,CAACqC,KAAK,CAACE,IAAI,GAAI,GAAEK,IAAI,GAAG1E,SAAS,GAAG,CAAE,IAAG;MACtD,CAAC,MACI8B,WAAW,CAACqC,KAAK,CAACE,IAAI,GAAI,GAAErD,CAAC,GAAGhB,SAAS,GAAG,CAAE,IAAG;MAEtD,IAAIkB,CAAC,GAAGuD,IAAI,EAAE;QACZ3C,WAAW,CAACqC,KAAK,CAACG,GAAG,GAAI,GAAEG,IAAI,GAAGzE,SAAS,GAAG,CAAE,IAAG;MACrD,CAAC,MACI,IAAIkB,CAAC,GAAG0D,IAAI,EAAE;QACjB9C,WAAW,CAACqC,KAAK,CAACG,GAAG,GAAI,GAAEM,IAAI,GAAG5E,SAAS,GAAG,CAAE,IAAG;MAErD,CAAC,MACI8B,WAAW,CAACqC,KAAK,CAACG,GAAG,GAAI,GAAEpD,CAAC,GAAGlB,SAAS,GAAG,CAAE,IAAG;IACvD;EACF;EAEA,SAAS8E,SAAS,CAACxB,CAAC,EAAE;IACpB,MAAMC,UAAU,GAAGjB,aAAa,CAACkB,OAAO;IACxC,IAAI1B,WAAW,IAAIyB,UAAU,EAAE;MAC7B,MAAMvC,CAAC,GAAG6C,IAAI,CAACC,KAAK,CAAC,CAACR,CAAC,CAACS,OAAO,GAAGR,UAAU,CAACS,UAAU,IAAIhE,SAAS,CAAC;MACrE,MAAMkB,CAAC,GAAG2C,IAAI,CAACC,KAAK,CAAC,CAACR,CAAC,CAACW,OAAO,GAAGV,UAAU,CAACW,SAAS,IAAIlE,SAAS,CAAC;MACpE,MAAM+E,YAAY,GAAG3C,MAAM,CAAC4C,IAAI,CAACxD,CAAC,IAAIA,CAAC,CAACN,CAAC,KAAKc,KAAK,IAAIR,CAAC,CAACR,CAAC,KAAKkB,KAAK,CAAC;MACrE,IAAI6C,YAAY,EAAE;QAChB,MAAME,SAAS,GAAGzC,OAAO,CAAC0C,WAAW,CAAChD,KAAK,EAAEF,KAAK,EAAEd,CAAC,EAAEF,CAAC,EAAE+D,YAAY,CAAC5D,IAAI,EAAE4D,YAAY,CAAC3D,IAAI,EAAEgB,MAAM,CAAC;QACvG,MAAM+C,eAAe,GAAG3C,OAAO,CAAC2C,eAAe,CAACjD,KAAK,EAAEF,KAAK,EAAEd,CAAC,EAAEF,CAAC,EAAE+D,YAAY,CAAC5D,IAAI,EAAE4D,YAAY,CAAC3D,IAAI,EAAEgB,MAAM,CAAC;QACjH,MAAMgD,aAAa,GAAG,KAAK,KAAKL,YAAY,CAAC3D,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI+D,eAAe,EAAE;UACnB,MAAME,aAAa,GAAGjD,MAAM,CAACkD,MAAM,CAAC,CAACC,OAAO,EAAE1E,KAAK,KAAK;YACtD,IAAIkE,YAAY,KAAKlE,KAAK,EAAE;cAC1BA,KAAK,CAACQ,SAAS,GAAG,KAAK;cACvBR,KAAK,CAACG,CAAC,GAAGE,CAAC;cACXL,KAAK,CAACK,CAAC,GAAGF,CAAC;cACXuE,OAAO,CAAC7E,IAAI,CAACG,KAAK,CAAC;YACrB,CAAC,MACI,IAAI,EAAEA,KAAK,CAACG,CAAC,KAAKE,CAAC,GAAGkE,aAAa,IAAIvE,KAAK,CAACK,CAAC,KAAKF,CAAC,CAAC,EAAE;cAC1D,IAAI,MAAM,KAAKH,KAAK,CAACM,IAAI,EACvBN,KAAK,CAACQ,SAAS,GAAG,KAAK;cACzBkE,OAAO,CAAC7E,IAAI,CAACG,KAAK,CAAC;YACrB;YACA,OAAO0E,OAAO;UAChB,CAAC,EAAE,EAAE,CAAC;UACNlD,SAAS,CAACgD,aAAa,CAAC;UACxB;;UAEA/E,MAAM,CAACkF,IAAI,CAAC,gBAAgB,EAAC3C,IAAI,CAAC4C,SAAS,CAAC;YAAC,MAAM,EAACJ;UAAa,CAAC,CAAC,CAAC;QACtE,CAAC,MACI;UACH,IAAIJ,SAAS,EAAE;YACb;YACA;YACA,IAAI,MAAM,KAAKF,YAAY,CAAC5D,IAAI,EAAE;cAChC,MAAMkE,aAAa,GAAGjD,MAAM,CAACkD,MAAM,CAAC,CAACC,OAAO,EAAE1E,KAAK,KAAK;gBACtD,IAAIkE,YAAY,KAAKlE,KAAK,EAAE;kBAC1B,IAAIA,KAAK,CAACM,IAAI,KAAK,MAAM,IAAI0C,IAAI,CAAC6B,GAAG,CAACxE,CAAC,GAAGgB,KAAK,CAAC,KAAK,CAAC,EAAE;oBACtD;oBACArB,KAAK,CAACQ,SAAS,GAAG,IAAI;kBACxB,CAAC,MACI;oBACHR,KAAK,CAACQ,SAAS,GAAG,KAAK;kBACzB;kBACAR,KAAK,CAACG,CAAC,GAAGE,CAAC;kBACXL,KAAK,CAACK,CAAC,GAAGF,CAAC;kBACX,IAAG,CAAC,KAAKH,KAAK,CAACG,CAAC,IAAI,CAAC,KAAKH,KAAK,CAACG,CAAC,EACjC;oBACEmC,OAAO,CAACC,GAAG,CAAE,kCAAiC,CAAC;oBAC/CV,gBAAgB,CAACqC,YAAY,CAAC;oBAC9BxC,qBAAqB,CAACiB,OAAO,CAACG,SAAS,CAACgC,MAAM,CAAC,QAAQ,CAAC;kBAC1D;kBACAJ,OAAO,CAAC7E,IAAI,CAACG,KAAK,CAAC;gBACrB,CAAC,MACI,IAAI,EAAEA,KAAK,CAACG,CAAC,KAAKE,CAAC,IAAIL,KAAK,CAACK,CAAC,KAAKF,CAAC,CAAC,EAAE;kBAC1C,IAAI,MAAM,KAAKH,KAAK,CAACM,IAAI,EACvBN,KAAK,CAACQ,SAAS,GAAG,KAAK;kBACzBkE,OAAO,CAAC7E,IAAI,CAACG,KAAK,CAAC;gBACrB;gBACA,OAAO0E,OAAO;cAChB,CAAC,EAAE,EAAE,CAAC;cACNlD,SAAS,CAACgD,aAAa,CAAC;cAC5B;cACA/E,MAAM,CAACkF,IAAI,CAAC,gBAAgB,EAAC3C,IAAI,CAAC4C,SAAS,CAAC;gBAAC,MAAM,EAACJ;cAAa,CAAC,CAAC,CAAC;YAClE,CAAC,MACI,IAAI,QAAQ,KAAKN,YAAY,CAAC5D,IAAI,IAAI,QAAQ,KAAK4D,YAAY,CAAC5D,IAAI,IAAI,MAAM,KAAK4D,YAAY,CAAC5D,IAAI,IAAI,OAAO,KAAK4D,YAAY,CAAC5D,IAAI,IAAI,MAAM,KAAK4D,YAAY,CAAC5D,IAAI,EAAE;cAC1K,MAAMkE,aAAa,GAAGjD,MAAM,CAACkD,MAAM,CAAC,CAACC,OAAO,EAAE1E,KAAK,KAAK;gBACtD,IAAIkE,YAAY,KAAKlE,KAAK,EAAE;kBAC1BA,KAAK,CAACG,CAAC,GAAGE,CAAC;kBACXL,KAAK,CAACK,CAAC,GAAGF,CAAC;kBACXuE,OAAO,CAAC7E,IAAI,CAACG,KAAK,CAAC;gBACrB,CAAC,MACI,IAAI,EAAEA,KAAK,CAACG,CAAC,KAAKE,CAAC,IAAIL,KAAK,CAACK,CAAC,KAAKF,CAAC,CAAC,EAAE;kBAC1CuE,OAAO,CAAC7E,IAAI,CAACG,KAAK,CAAC;gBACrB;gBACA,OAAO0E,OAAO;cAChB,CAAC,EAAE,EAAE,CAAC;cACNlD,SAAS,CAACgD,aAAa,CAAC;cAC5B;cACA/E,MAAM,CAACkF,IAAI,CAAC,gBAAgB,EAAC3C,IAAI,CAAC4C,SAAS,CAAC;gBAAC,MAAM,EAACJ;cAAa,CAAC,CAAC,CAAC;YAClE;UAEF,CAAC,MACI;YACH;YACAvD,WAAW,CAACqC,KAAK,CAACC,QAAQ,GAAG,UAAU;YACvCtC,WAAW,CAACqC,KAAK,CAACyB,cAAc,CAAC,KAAK,CAAC;YACvC9D,WAAW,CAACqC,KAAK,CAACyB,cAAc,CAAC,MAAM,CAAC;UAC1C;QACF;MAEF;MACA7D,cAAc,CAAC,IAAI,CAAC;IACtB;EACF;EAEA,SAAS8D,WAAW,CAAC1E,IAAI,EACzB;IACE,IAAIsB,aAAa,EAAE;MACjB,MAAM4C,aAAa,GAAGjD,MAAM,CAACkD,MAAM,CAAC,CAACC,OAAO,EAAE1E,KAAK,KAAK;QACtD,IAAI4B,aAAa,KAAK5B,KAAK,EAAE;UAC3BA,KAAK,CAACM,IAAI,GAAGA,IAAI;UACjBN,KAAK,CAACC,KAAK,GAAID,KAAK,CAACO,IAAI,KAAK,KAAK,GAAK,oBAAmBD,IAAK,MAAK,GAAE,oBAAmBA,IAAK,MAAK;QACtG;QACAoE,OAAO,CAAC7E,IAAI,CAACG,KAAK,CAAC;QACnB,OAAO0E,OAAO;MAChB,CAAC,EAAE,EAAE,CAAC;MACRlD,SAAS,CAACgD,aAAa,CAAC;MACxB9C,qBAAqB,CAACiB,OAAO,CAACG,SAAS,CAACmC,GAAG,CAAC,QAAQ,CAAC;IACrD;EACF;EAEA,SAASC,iBAAiB,GAC1B;IACE,IAAGtD,aAAa,EAChB,OAAOA,aAAa,CAACrB,IAAI,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG;EACjD;EAEA,IAAI4E,KAAK,GAAG,EAAE;EACd,KAAK,IAAIxF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAAC+F,MAAM,EAAE,EAAEzF,CAAC,EAAE;IAC5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,cAAc,CAACgG,MAAM,EAAE,EAAExF,CAAC,EAAE;MAC9C,IAAIK,KAAK,GAAGoF,SAAS;MACrB9D,MAAM,CAACa,OAAO,CAACzB,CAAC,IAAI;QAAE,IAAIA,CAAC,CAACR,CAAC,KAAKR,CAAC,IAAIgB,CAAC,CAACN,CAAC,KAAKT,CAAC,EAAEK,KAAK,GAAGU,CAAC,CAACV,KAAK;MAAC,CAAC,CAAC;MACpEkF,KAAK,CAACtF,IAAI,eAAC,QAAC,IAAI;QAAkB,GAAG,EAAEF,CAAC,GAAGA,CAAC,GAAGC,CAAE;QAAC,KAAK,EAAEK;MAAM,GAAxC,GAAEN,CAAE,GAAEC,CAAE,EAAC;QAAA;QAAA;QAAA;MAAA,QAAkC,CAAC;IACrE;EACF;EACA,oBACE;IAAA,wBACE;MAAK,EAAE,EAAC,sBAAsB;MAAC,SAAS,EAAC,QAAQ;MAAC,GAAG,EAAE8B,qBAAsB;MAAA,uBAC3E;QAAK,SAAS,EAAC,YAAY;QAAA,wBACzB;UAAK,OAAO,EAAE,MAAMsD,WAAW,CAAC,MAAM,CAAE;UAAC,GAAG,EAAG,kBAAiBE,iBAAiB,EAAG;QAAW;UAAA;UAAA;UAAA;QAAA,QAAG,eAClG;UAAK,OAAO,EAAE,MAAMF,WAAW,CAAC,OAAO,CAAE;UAAC,GAAG,EAAG,kBAAiBE,iBAAiB,EAAG;QAAY;UAAA;UAAA;UAAA;QAAA,QAAG,eACpG;UAAK,OAAO,EAAE,MAAMF,WAAW,CAAC,QAAQ,CAAE;UAAC,GAAG,EAAG,kBAAiBE,iBAAiB,EAAG;QAAa;UAAA;UAAA;UAAA;QAAA,QAAG,eACtG;UAAK,OAAO,EAAE,MAAMF,WAAW,CAAC,QAAQ,CAAE;UAAC,GAAG,EAAG,kBAAiBE,iBAAiB,EAAG;QAAa;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IAClG;MAAA;MAAA;MAAA;IAAA,QAEF,eACN;MAAK,aAAa,EAAEzC,CAAC,IAAIiB,SAAS,CAACjB,CAAC,CAAE;MAAC,aAAa,EAAEA,CAAC,IAAID,SAAS,CAACC,CAAC,CAAE;MAAC,WAAW,EAAEA,CAAC,IAAIwB,SAAS,CAACxB,CAAC,CAAE;MAAC,EAAE,EAAC,WAAW;MAAC,GAAG,EAAEhB,aAAc;MAAA,UACxI0D;IAAK;MAAA;MAAA;MAAA;IAAA,QACF;EAAA,gBACL;AAGP;AAAC,GA1NuBnE,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}