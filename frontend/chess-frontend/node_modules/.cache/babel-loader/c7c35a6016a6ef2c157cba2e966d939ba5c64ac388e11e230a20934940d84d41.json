{"ast":null,"code":"export default class Referee {\n  /**\r\n   * \r\n   * @param {*} boardState the boardState for which we want to check for \"CHECK\"\r\n   * @param {*} team the team whose king we want to check (\"our\" or \"opponent\")\r\n   * @param {*} room room from the gameboard component\r\n   * @param {*} color color from the gameboard component\r\n   * @returns true if in check otherwise false\r\n   */\n  inCheck(boardState, team, room, color) {\n    const bs = Object.values(boardState);\n    const king = bs.find(p => p.team === team && p.type === \"king\");\n    if (!king) {\n      return false;\n    }\n    const oppteam = team === \"our\" ? \"opponent\" : \"our\";\n    const checkArr = bs.map(piece => {\n      if (piece.team === oppteam && this.isValidMove(piece.x, piece.y, king.x, king.y, piece.type, piece.team, bs, room, color)) return true;else return false;\n    });\n    const ret = checkArr.find(ele => ele === true);\n    if (ret) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // if (referee.inCheck(referee.getBoardStateAfterMove(x, y, i, j, pieces), currentPiece.team, room, \"white\")) {\n  //     continue;\n  //   }\n  //   else{\n\n  /**\r\n   * \r\n   * @param {*} px  previous pos x\r\n   * @param {*} py previous pos y\r\n   * @param {*} fx final pos x\r\n   * @param {*} fy final pos y\r\n   * @param {*} boardState \r\n   * @returns  board state after move is made\r\n   */\n  getBoardStateAfterMove(px, py, fy, fx, boardState) {\n    const ret = [];\n    // if there is a piece on (fx,fy) we need to delete it\n    boardState.forEach(ele => {\n      if (ele.x === fx && ele.y === fy) {\n        // do nothing\n      } else if (ele.x === px && ele.y === py) {\n        const newEle = {\n          ...ele\n        };\n        newEle.y = fy;\n        newEle.x = fx;\n        ret.push(newEle);\n      } else {\n        const newEle = {\n          ...ele\n        };\n        ret.push(newEle);\n      }\n    });\n    return ret;\n  }\n  isTileOccupied(x, y, boardState) {\n    const piece = boardState.find(p => p.y === x && p.x === y);\n    if (piece) {\n      return true;\n    }\n    return false;\n  }\n  isTileOccupiedByOpponent(x, y, boardState, team) {\n    const piece = boardState.find(p => p.y === x && p.x === y && p.team !== team);\n    if (piece) {\n      return true;\n    }\n    return false;\n  }\n  isEnPassantMove(py, px, y, x, type, team, boardState) {\n    if (\"pawn\" === type) {\n      const pawnDirection = \"our\" === team ? 1 : -1;\n      if (x - px === 1 || x - px === -1) {\n        if (py - y === 1 || py - y === -1) {\n          const enPassantAttackedPiece = boardState.find(p => p.y === x && p.x === y + pawnDirection && p.enPassant);\n          if (enPassantAttackedPiece) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // py = initial y coordinate of the moving piece\n  // px = initial x coordinate of the moving piece\n  // y = y-coordinate of the place where we are moving the piece\n  // x = x-coordinate of the place where we are moving the piece\n  async isValidMove(py, px, y, x, type, team, boardState, room, color) {\n    //     if (\"opponent\" === team)\n    //     return false;\n\n    // let ret = await fetch('http://192.168.29.13:8080/api/turn', {\n    //     method: \"POST\",\n    //     headers: {\n    //         \"Content-type\": \"application/json\",\n    //     },\n    //     body: room\n    // })\n    //     .then(response => response.json())\n    //     .then(data => {\n    //         if ((data[\"turn\"] == \"invalid\")) {\n    //             return false;\n    //         }\n    //         else if (data[\"turn\"] != color) {\n    //             return false;\n    //         }\n    //         else return true;\n    //     })\n    //     .catch(error => console.error('Error:', error));\n\n    // if (!ret)\n    // {\n    //     return false;\n    // }\n\n    if (px === x && py === y) return false;\n    if (type === \"pawn\") {\n      const pawnRow = \"our\" === team ? 6 : 1;\n      const pawnDirection = \"our\" === team ? 1 : -1;\n      //MOVEMENT LOGIC \n      if (py === pawnRow) {\n        if (px === x && (py - y === 1 * pawnDirection || py - y === 2 * pawnDirection)) {\n          let retVal = false;\n          retVal = py - y === 1 * pawnDirection ? !this.isTileOccupied(x, y, boardState) : !this.isTileOccupied(x, y, boardState) && !this.isTileOccupied(x, y + pawnDirection, boardState);\n          return retVal;\n        } else if (x - px === 1 || x - px === -1) {\n          if (py - y === 1 || py - y === -1) {\n            if (this.isTileOccupiedByOpponent(x, y, boardState, team)) return true;\n          }\n        }\n      } else if (x === px && py - y === 1 * pawnDirection) {\n        return !this.isTileOccupied(x, y, boardState);\n      }\n      //ATTACKING LOGIC\n      else if (x - px === 1 || x - px === -1) {\n        if (py - y === 1 || py - y === -1) {\n          if (this.isTileOccupiedByOpponent(x, y, boardState, team)) return true;\n        }\n      }\n    } else if (type === \"knight\") {\n      const knight_prospects = [[px + 1, py - 2], [px + 1, py + 2], [px + 2, py - 1], [px + 2, py + 1], [px - 1, py - 2], [px - 1, py + 2], [px - 2, py - 1], [px - 2, py + 1]];\n      let flag = false;\n      for (let i = 0; i <= 7; ++i) {\n        const curr = knight_prospects[i];\n        if (x === curr[0] && y === curr[1]) {\n          flag = true;\n          break;\n        }\n      }\n      if (flag === false) {\n        return flag;\n      } else {\n        if (this.isTileOccupied(x, y, boardState)) {\n          if (this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n            return true;\n          } else return false;\n        } else {\n          return true;\n        }\n      }\n    } else if (\"bishop\" === type) {\n      //move and attack logic for the bishop\n      //check if the desired position is on a diagonal of the initial position.\n      const isTheMoveOnDiag = Math.abs(px - x) === Math.abs(py - y);\n      if (!isTheMoveOnDiag) return false;else {\n        const diagDir = [x - px > 0 ? 1 : -1, y - py > 0 ? 1 : -1];\n        let curr = [px + diagDir[0], py + diagDir[1]];\n        // pieces present in between.\n        // c is the number of squares in between.\n        let c = Math.abs(x - px) - 1;\n        //here we are checking whether the in-between pieces are  blockading or not \n        //if they are bloakading then we deem the move invalid\n        while (c--) {\n          if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n            return false;\n          }\n          curr[0] += diagDir[0];\n          curr[1] += diagDir[1];\n        }\n        if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n          return false;\n        }\n        return true;\n      }\n    } else if (\"rook\" === type) {\n      //move and attack logic for the rook\n      // check if the desired position is on a horizontal or vertical file of the original position  \n      const isTheMoveOnSameFile = px === x || py === y;\n      if (!isTheMoveOnSameFile) return false;else {\n        let curr = [x === px ? x : x > px ? px + 1 : px - 1, y === py ? y : y > py ? py + 1 : py - 1];\n        // pieces present in between.\n        // c is the number of squares in between.\n        let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\n        //here we are checking whether the in-between pieces are  blockading or not \n        //if they are bloakading then we deem the move invalid\n        while (c--) {\n          if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n            return false;\n          }\n          let a = curr[0],\n            b = curr[1];\n          curr[0] = x === px ? a : x > px ? a + 1 : a - 1;\n          curr[1] = y === py ? b : y > py ? b + 1 : b - 1;\n        }\n        if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n          return false;\n        }\n        return true;\n      }\n    } else if (\"queen\" === type) {\n      //move and attack logic for the queen\n      // check if the desired position is on a horizontal or vertical file or on one of the diagonals of the original position  \n      const isTheMoveOnSameFile = px === x || py === y;\n      const isTheMoveOnDiag = Math.abs(px - x) === Math.abs(py - y);\n      if (!(isTheMoveOnSameFile || isTheMoveOnDiag)) return false;else {\n        if (isTheMoveOnDiag) {\n          const diagDir = [x - px > 0 ? 1 : -1, y - py > 0 ? 1 : -1];\n          let curr = [px + diagDir[0], py + diagDir[1]];\n          // pieces present in between.\n          // c is the number of squares in between.\n          let c = Math.abs(x - px) - 1;\n          //here we are checking whether the in-between pieces are  blockading or not \n          //if they are bloakading then we deem the move invalid\n          while (c--) {\n            if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n              return false;\n            }\n            curr[0] += diagDir[0];\n            curr[1] += diagDir[1];\n          }\n          if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n            return false;\n          }\n          return true;\n        } else {\n          let curr = [x === px ? x : x > px ? px + 1 : px - 1, y === py ? y : y > py ? py + 1 : py - 1];\n          // pieces present in between.\n          // c is the number of squares in between.\n          let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\n          //here we are checking whether the in-between pieces are  blockading or not \n          //if they are bloakading then we deem the move invalid\n          while (c--) {\n            if (this.isTileOccupied(curr[0], curr[1], boardState)) {\n              return false;\n            }\n            let a = curr[0],\n              b = curr[1];\n            curr[0] = x === px ? a : x > px ? a + 1 : a - 1;\n            curr[1] = y === py ? b : y > py ? b + 1 : b - 1;\n          }\n          if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n            return false;\n          }\n          return true;\n        }\n      }\n    } else if (\"king\" === type) {\n      const king_dir = [[px + 1, py], [px, py + 1], [px - 1, py], [px, py - 1], [px + 1, py + 1], [px + 1, py - 1], [px - 1, py - 1], [px - 1, py + 1]];\n      const piece = king_dir.find(p => p[0] === x && p[1] === y);\n      if (piece) {} else return false;\n      if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["Referee","inCheck","boardState","team","room","color","bs","Object","values","king","find","p","type","oppteam","checkArr","map","piece","isValidMove","x","y","ret","ele","getBoardStateAfterMove","px","py","fy","fx","forEach","newEle","push","isTileOccupied","isTileOccupiedByOpponent","isEnPassantMove","pawnDirection","enPassantAttackedPiece","enPassant","pawnRow","retVal","knight_prospects","flag","i","curr","isTheMoveOnDiag","Math","abs","diagDir","c","isTheMoveOnSameFile","max","a","b","king_dir"],"sources":["C:/Users/think/Desktop/Projects/Chess Project/frontend/chess-frontend/src/Components/Referee.js"],"sourcesContent":["\r\nexport default class Referee {\r\n\r\n    /**\r\n     * \r\n     * @param {*} boardState the boardState for which we want to check for \"CHECK\"\r\n     * @param {*} team the team whose king we want to check (\"our\" or \"opponent\")\r\n     * @param {*} room room from the gameboard component\r\n     * @param {*} color color from the gameboard component\r\n     * @returns true if in check otherwise false\r\n     */\r\n    inCheck(boardState,team,room,color) {\r\n\r\n        const bs = Object.values(boardState);\r\n\r\n        const king = bs.find((p) => (p.team === team && p.type === \"king\"));\r\n        if (!king) {\r\n            return false;\r\n        }\r\n        const oppteam = team === \"our\" ? \"opponent\" : \"our\";\r\n        const checkArr = bs.map(piece => {\r\n            if (piece.team === oppteam && this.isValidMove(piece.x, piece.y, king.x, king.y, piece.type, piece.team, bs,room,color))\r\n                return true;\r\n            else\r\n                return false;\r\n        });\r\n        const ret = checkArr.find((ele) => (ele === true));\r\n        if (ret) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // if (referee.inCheck(referee.getBoardStateAfterMove(x, y, i, j, pieces), currentPiece.team, room, \"white\")) {\r\n    //     continue;\r\n    //   }\r\n    //   else{\r\n\r\n    /**\r\n     * \r\n     * @param {*} px  previous pos x\r\n     * @param {*} py previous pos y\r\n     * @param {*} fx final pos x\r\n     * @param {*} fy final pos y\r\n     * @param {*} boardState \r\n     * @returns  board state after move is made\r\n     */\r\n    getBoardStateAfterMove(px,py,fy,fx,boardState)\r\n    {\r\n        const ret = [];\r\n        // if there is a piece on (fx,fy) we need to delete it\r\n        boardState.forEach((ele) => {\r\n            if (ele.x === fx && ele.y === fy) {\r\n                // do nothing\r\n            }\r\n            else if (ele.x === px && ele.y === py) {\r\n                const newEle = {...ele};\r\n                newEle.y = fy; newEle.x = fx; ret.push(newEle);\r\n            }\r\n            else {\r\n                const newEle = {...ele};\r\n                ret.push(newEle);\r\n            }\r\n        })\r\n        return ret;\r\n    }\r\n\r\n    isTileOccupied(x, y, boardState) {\r\n        const piece = boardState.find((p) => (p.y === x && p.x === y));\r\n        if (piece) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTileOccupiedByOpponent(x, y, boardState, team) {\r\n        const piece = boardState.find((p) => (p.y === x && p.x === y && p.team !== team));\r\n        if (piece) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isEnPassantMove(py, px, y, x, type, team, boardState) {\r\n        if (\"pawn\" === type) {\r\n            const pawnDirection = \"our\" === team ? 1 : -1;\r\n            if (x - px === 1 || x - px === -1) {\r\n                if (py - y === 1 || py - y === -1) {\r\n                    const enPassantAttackedPiece = boardState.find(p => ((p.y === x) && (p.x === y + pawnDirection) && p.enPassant));\r\n                    if (enPassantAttackedPiece) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // py = initial y coordinate of the moving piece\r\n    // px = initial x coordinate of the moving piece\r\n    // y = y-coordinate of the place where we are moving the piece\r\n    // x = x-coordinate of the place where we are moving the piece\r\n    async isValidMove(py, px, y, x, type, team, boardState,room,color) {\r\n\r\n        \r\n       \r\n        //     if (\"opponent\" === team)\r\n        //     return false;\r\n\r\n        // let ret = await fetch('http://192.168.29.13:8080/api/turn', {\r\n        //     method: \"POST\",\r\n        //     headers: {\r\n        //         \"Content-type\": \"application/json\",\r\n        //     },\r\n        //     body: room\r\n        // })\r\n        //     .then(response => response.json())\r\n        //     .then(data => {\r\n        //         if ((data[\"turn\"] == \"invalid\")) {\r\n        //             return false;\r\n        //         }\r\n        //         else if (data[\"turn\"] != color) {\r\n        //             return false;\r\n        //         }\r\n        //         else return true;\r\n        //     })\r\n        //     .catch(error => console.error('Error:', error));\r\n\r\n        // if (!ret)\r\n        // {\r\n        //     return false;\r\n        // }\r\n   \r\nif(px===x && py===y)\r\nreturn false;\r\n\r\n        if (type === \"pawn\") {\r\n            const pawnRow = ((\"our\" === team) ? 6 : 1);\r\n            const pawnDirection = ((\"our\" === team) ? 1 : -1);\r\n            //MOVEMENT LOGIC \r\n            if (py === pawnRow) {\r\n                if (px === x && ((py - y) === 1 * pawnDirection || (py - y) === 2 * pawnDirection)) {\r\n                    let retVal = false;\r\n                    retVal = (py - y) === 1 * pawnDirection ? (!this.isTileOccupied(x, y, boardState)) : ((!this.isTileOccupied(x, y, boardState)) && (!this.isTileOccupied(x, y + pawnDirection, boardState)));\r\n                    return retVal;\r\n                }\r\n                else if (x - px === 1 || x - px === -1) {\r\n                    if (py - y === 1 || py - y === -1) {\r\n                        if (this.isTileOccupiedByOpponent(x, y, boardState, team))\r\n                            return true;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (x === px && ((py - y) === 1 * pawnDirection)) {\r\n                return !this.isTileOccupied(x, y, boardState);\r\n            }\r\n            //ATTACKING LOGIC\r\n            else if (x - px === 1 || x - px === -1) {\r\n                if (py - y === 1 || py - y === -1) {\r\n                    if (this.isTileOccupiedByOpponent(x, y, boardState, team))\r\n                        return true;\r\n                }\r\n            }\r\n        }\r\n        else if (type === \"knight\") {\r\n            const knight_prospects = [[px + 1, py - 2], [px + 1, py + 2], [px + 2, py - 1], [px + 2, py + 1], [px - 1, py - 2], [px - 1, py + 2], [px - 2, py - 1], [px - 2, py + 1]];\r\n            let flag = false;\r\n            for (let i = 0; i <= 7; ++i) {\r\n                const curr = knight_prospects[i];\r\n                if ((x === curr[0] && y === curr[1])) {\r\n                    flag = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (flag === false) {\r\n                return flag;\r\n            }\r\n            else {\r\n                if (this.isTileOccupied(x, y, boardState)) {\r\n                    if (this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return false;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if (\"bishop\" === type) {\r\n            //move and attack logic for the bishop\r\n            //check if the desired position is on a diagonal of the initial position.\r\n            const isTheMoveOnDiag = (Math.abs(px - x) === Math.abs(py - y));\r\n            if (!isTheMoveOnDiag)\r\n                return false;\r\n            else {\r\n                const diagDir = [((x - px) > 0 ? 1 : -1), ((y - py) > 0 ? 1 : -1)];\r\n                let curr = [px + diagDir[0], py + diagDir[1]];\r\n                // pieces present in between.\r\n                // c is the number of squares in between.\r\n                let c = Math.abs(x - px) - 1;\r\n                //here we are checking whether the in-between pieces are  blockading or not \r\n                //if they are bloakading then we deem the move invalid\r\n                while (c--) {\r\n                    if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                        return false;\r\n                    }\r\n                    curr[0] += diagDir[0];\r\n                    curr[1] += diagDir[1];\r\n                }\r\n                if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n        }\r\n        else if (\"rook\" === type) {\r\n            //move and attack logic for the rook\r\n            // check if the desired position is on a horizontal or vertical file of the original position  \r\n            const isTheMoveOnSameFile = (px === x || py === y);\r\n            if (!isTheMoveOnSameFile)\r\n                return false;\r\n            else {\r\n                let curr = [(x === px ? x : ((x > px) ? px + 1 : px - 1)), (y === py ? y : ((y > py ? py + 1 : py - 1)))];\r\n                // pieces present in between.\r\n                // c is the number of squares in between.\r\n                let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\r\n                //here we are checking whether the in-between pieces are  blockading or not \r\n                //if they are bloakading then we deem the move invalid\r\n                while (c--) {\r\n                    if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                        return false;\r\n                    }\r\n                    let a = curr[0], b = curr[1];\r\n                    curr[0] = (x === px ? a : ((x > px) ? a + 1 : a - 1));\r\n                    curr[1] = (y === py ? b : ((y > py) ? b + 1 : b - 1));\r\n                }\r\n                if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else if (\"queen\" === type) {\r\n            //move and attack logic for the queen\r\n            // check if the desired position is on a horizontal or vertical file or on one of the diagonals of the original position  \r\n            const isTheMoveOnSameFile = ((px === x || py === y));\r\n            const isTheMoveOnDiag = (Math.abs(px - x) === Math.abs(py - y));\r\n            if (!(isTheMoveOnSameFile || isTheMoveOnDiag))\r\n                return false;\r\n            else {\r\n                if (isTheMoveOnDiag) {\r\n                    const diagDir = [((x - px) > 0 ? 1 : -1), ((y - py) > 0 ? 1 : -1)];\r\n                    let curr = [px + diagDir[0], py + diagDir[1]];\r\n                    // pieces present in between.\r\n                    // c is the number of squares in between.\r\n                    let c = Math.abs(x - px) - 1;\r\n                    //here we are checking whether the in-between pieces are  blockading or not \r\n                    //if they are bloakading then we deem the move invalid\r\n                    while (c--) {\r\n                        if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                            return false;\r\n                        }\r\n                        curr[0] += diagDir[0];\r\n                        curr[1] += diagDir[1];\r\n                    }\r\n                    if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                else {\r\n                    let curr = [(x === px ? x : ((x > px) ? px + 1 : px - 1)), (y === py ? y : ((y > py ? py + 1 : py - 1)))];\r\n                    // pieces present in between.\r\n                    // c is the number of squares in between.\r\n                    let c = Math.max(Math.abs(x - px), Math.abs(y - py)) - 1;\r\n                    //here we are checking whether the in-between pieces are  blockading or not \r\n                    //if they are bloakading then we deem the move invalid\r\n                    while (c--) {\r\n                        if (this.isTileOccupied(curr[0], curr[1], boardState)) {\r\n                            return false;\r\n                        }\r\n                        let a = curr[0], b = curr[1];\r\n                        curr[0] = (x === px ? a : ((x > px) ? a + 1 : a - 1));\r\n                        curr[1] = (y === py ? b : ((y > py) ? b + 1 : b - 1));\r\n                    }\r\n                    if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if (\"king\" === type) {\r\n            const king_dir = [[px + 1, py], [px, py + 1], [px - 1, py], [px, py - 1], [px + 1, py + 1], [px + 1, py - 1], [px - 1, py - 1], [px - 1, py + 1]];\r\n            const piece = king_dir.find((p) => (p[0] === x && p[1] === y));\r\n            if (piece) {\r\n\r\n            }\r\n            else\r\n                return false;\r\n\r\n            if (this.isTileOccupied(x, y, boardState) && !this.isTileOccupiedByOpponent(x, y, boardState, team)) {\r\n                return false;\r\n            }\r\n            return true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}